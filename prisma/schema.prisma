// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  reviews   Review[]
  cart      CartItem[]
  affiliate AffiliateUser?

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

// Product Categories
model Category {
  id           String @id @default(cuid())
  name         String
  slug         String @unique
  description  String?
  image        String?
  productCount Int    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

// Products
model Product {
  id                  String  @id @default(cuid())
  name                String
  description         String
  price               Float
  originalPrice       Float?
  sku                 String? @unique
  inStock             Boolean @default(true)
  stockQuantity       Int     @default(0)
  rating              Float   @default(0)
  reviewCount         Int     @default(0)
  affiliateCommission Float   @default(8) // Percentage
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  
  images     ProductImage[]
  tags       ProductTag[]
  reviews    Review[]
  cartItems  CartItem[]
  orderItems OrderItem[]
  affiliateLinks AffiliateLink[]

  @@map("products")
}

// Product Images
model ProductImage {
  id        String @id @default(cuid())
  url       String
  alt       String?
  order     Int    @default(0)
  createdAt DateTime @default(now())

  // Relations
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// Product Tags
model ProductTag {
  id   String @id @default(cuid())
  name String @unique

  // Relations
  products Product[]

  @@map("product_tags")
}

// Product Reviews
model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// Shopping Cart
model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

// Orders
model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  status        OrderStatus @default(PENDING)
  total         Float
  subtotal      Float
  tax           Float       @default(0)
  shipping      Float       @default(0)
  discount      Float       @default(0)
  shippingAddress Json
  billingAddress  Json?
  paymentMethod   String?
  paymentStatus   PaymentStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  items       OrderItem[]
  commissions Commission[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Order Items
model OrderItem {
  id          String @id @default(cuid())
  quantity    Int
  price       Float // Price at time of order
  total       Float
  createdAt   DateTime @default(now())

  // Relations
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Affiliate Program
model AffiliateUser {
  id              String  @id @default(cuid())
  affiliateCode   String  @unique
  commissionRate  Float   @default(8) // Percentage
  totalEarnings   Float   @default(0)
  pendingEarnings Float   @default(0)
  referralCount   Int     @default(0)
  status          AffiliateStatus @default(ACTIVE)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  links       AffiliateLink[]
  commissions Commission[]
  payouts     AffiliatePayout[]

  @@map("affiliate_users")
}

enum AffiliateStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// Affiliate Links
model AffiliateLink {
  id           String @id @default(cuid())
  originalUrl  String
  affiliateUrl String @unique
  clicks       Int    @default(0)
  conversions  Int    @default(0)
  earnings     Float  @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  affiliateId String
  affiliate   AffiliateUser @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  productId   String?
  product     Product? @relation(fields: [productId], references: [id])

  @@map("affiliate_links")
}

// Commissions
model Commission {
  id          String           @id @default(cuid())
  amount      Float
  percentage  Float
  status      CommissionStatus @default(PENDING)
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  affiliateId String
  affiliate   AffiliateUser @relation(fields: [affiliateId], references: [id])
  orderId     String
  order       Order @relation(fields: [orderId], references: [id])

  @@map("commissions")
}

enum CommissionStatus {
  PENDING
  APPROVED
  PAID
  CANCELLED
}

// Affiliate Payouts
model AffiliatePayout {
  id          String        @id @default(cuid())
  amount      Float
  method      PayoutMethod
  status      PayoutStatus  @default(PENDING)
  reference   String?       // Payment reference/transaction ID
  processedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  affiliateId String
  affiliate   AffiliateUser @relation(fields: [affiliateId], references: [id])

  @@map("affiliate_payouts")
}

enum PayoutMethod {
  PAYPAL
  BANK_TRANSFER
  STRIPE
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Analytics (Optional - for tracking)
model AnalyticsEvent {
  id         String   @id @default(cuid())
  event      String   // 'page_view', 'product_view', 'add_to_cart', etc.
  data       Json?    // Additional event data
  userAgent  String?
  ipAddress  String?
  createdAt  DateTime @default(now())

  // Relations
  userId      String?
  productId   String?
  affiliateId String?

  @@map("analytics_events")
}
