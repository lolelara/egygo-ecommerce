import { Client, Databases } from 'node-appwrite';

const client = new Client()
  .setEndpoint('https://fra.cloud.appwrite.io/v1')
  .setProject('68de037e003bd03c4d45')
  .setKey(process.env.APPWRITE_API_KEY || '');

const databases = new Databases(client);
const DATABASE_ID = '68de037e003bd03c4d45';
const COLLECTION_ID = 'users';

async function addApprovalAttributes() {
  try {
    console.log('๐ง ุฅุถุงูุฉ ุญููู ูุธุงู ุงูููุงููุฉ ุฅูู ุฌุฏูู users...\n');
    
    // 1. Add alternativePhone attribute
    console.log('1๏ธโฃ ุฅุถุงูุฉ ุญูู alternativePhone...');
    try {
      await databases.createStringAttribute(
        DATABASE_ID,
        COLLECTION_ID,
        'alternativePhone',
        255,
        false, // not required
        ''     // default value
      );
      console.log('   โ ุชู ุฅุถุงูุฉ alternativePhone ุจูุฌุงุญ');
    } catch (error) {
      if (error.code === 409) {
        console.log('   โน๏ธ  alternativePhone ููุฌูุฏ ุจุงููุนู');
      } else {
        throw error;
      }
    }

    await new Promise(resolve => setTimeout(resolve, 2000));

    // 2. Add accountStatus attribute
    console.log('\n2๏ธโฃ ุฅุถุงูุฉ ุญูู accountStatus...');
    try {
      await databases.createEnumAttribute(
        DATABASE_ID,
        COLLECTION_ID,
        'accountStatus',
        ['pending', 'approved', 'rejected'],
        false,  // not required
        'approved' // default value
      );
      console.log('   โ ุชู ุฅุถุงูุฉ accountStatus ุจูุฌุงุญ');
    } catch (error) {
      if (error.code === 409) {
        console.log('   โน๏ธ  accountStatus ููุฌูุฏ ุจุงููุนู');
      } else {
        throw error;
      }
    }

    await new Promise(resolve => setTimeout(resolve, 2000));

    // 3. Add approvedAt attribute
    console.log('\n3๏ธโฃ ุฅุถุงูุฉ ุญูู approvedAt...');
    try {
      await databases.createDatetimeAttribute(
        DATABASE_ID,
        COLLECTION_ID,
        'approvedAt',
        false // not required
      );
      console.log('   โ ุชู ุฅุถุงูุฉ approvedAt ุจูุฌุงุญ');
    } catch (error) {
      if (error.code === 409) {
        console.log('   โน๏ธ  approvedAt ููุฌูุฏ ุจุงููุนู');
      } else {
        throw error;
      }
    }

    await new Promise(resolve => setTimeout(resolve, 2000));

    // 4. Add approvedBy attribute (admin user ID who approved)
    console.log('\n4๏ธโฃ ุฅุถุงูุฉ ุญูู approvedBy...');
    try {
      await databases.createStringAttribute(
        DATABASE_ID,
        COLLECTION_ID,
        'approvedBy',
        255,
        false // not required
      );
      console.log('   โ ุชู ุฅุถุงูุฉ approvedBy ุจูุฌุงุญ');
    } catch (error) {
      if (error.code === 409) {
        console.log('   โน๏ธ  approvedBy ููุฌูุฏ ุจุงููุนู');
      } else {
        throw error;
      }
    }

    await new Promise(resolve => setTimeout(resolve, 2000));

    // 5. Add rejectionReason attribute
    console.log('\n5๏ธโฃ ุฅุถุงูุฉ ุญูู rejectionReason...');
    try {
      await databases.createStringAttribute(
        DATABASE_ID,
        COLLECTION_ID,
        'rejectionReason',
        1000,
        false // not required
      );
      console.log('   โ ุชู ุฅุถุงูุฉ rejectionReason ุจูุฌุงุญ');
    } catch (error) {
      if (error.code === 409) {
        console.log('   โน๏ธ  rejectionReason ููุฌูุฏ ุจุงููุนู');
      } else {
        throw error;
      }
    }

    console.log('\nโณ ุงูุชุธุงุฑ 5 ุซูุงูู ููุชุฃูุฏ ูู ุฌุงูุฒูุฉ ุงูุญููู...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    console.log('\nโจ ุชู ุงูุงูุชูุงุก ุจูุฌุงุญ!');
    console.log('\n๐ ููุฎุต ุงูุญููู ุงููุถุงูุฉ:');
    console.log('   โข alternativePhone (String) - ุฑูู ูุงุชู ุจุฏูู');
    console.log('   โข accountStatus (Enum) - ุญุงูุฉ ุงูุญุณุงุจ [pending, approved, rejected]');
    console.log('   โข approvedAt (DateTime) - ุชุงุฑูุฎ ุงูููุงููุฉ');
    console.log('   โข approvedBy (String) - ูุนุฑู ุงููุณุคูู ุงูุฐู ูุงูู');
    console.log('   โข rejectionReason (String) - ุณุจุจ ุงูุฑูุถ');
    
    console.log('\n๐ ููุงุญุธุงุช ูููุฉ:');
    console.log('   1. ุญุณุงุจุงุช ุงูุชุฌุงุฑ ูุงููุณูููู ุงูุฌุฏูุฏุฉ ุณุชููู ุจุญุงูุฉ "pending"');
    console.log('   2. ูุฌุจ ุนูู ุงูุฃุฏูู ูุฑุงุฌุนุฉ ูุงูููุงููุฉ ุนูู ุงูุญุณุงุจุงุช ุงูุฌุฏูุฏุฉ');
    console.log('   3. ุญุณุงุจุงุช ุงูุนููุงุก ุชุชู ุงูููุงููุฉ ุนูููุง ุชููุงุฆูุงู');
    
  } catch (error) {
    console.error('\nโ ุญุฏุซ ุฎุทุฃ:', error);
    throw error;
  }
}

// Run the script
addApprovalAttributes()
  .then(() => {
    console.log('\nโ ุชู ุชูููุฐ ุงูุณูุฑูุจุช ุจูุฌุงุญ!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n๐ฅ ูุดู ุชูููุฐ ุงูุณูุฑูุจุช:', error);
    process.exit(1);
  });
