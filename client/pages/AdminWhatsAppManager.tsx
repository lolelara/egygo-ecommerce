/**
 * Admin WhatsApp Manager
 * 
 * ุฅุฏุงุฑุฉ ุฑุณุงุฆู ุงููุงุชุณุงุจ:
 * - ุฅุฑุณุงู ุฑุณุงุฆู ูุฑุฏูุฉ
 * - ุฅุฑุณุงู ุฑุณุงุฆู ุฌูุงุนูุฉ
 * - ุนุฑุถ ููุงูุจ ุงูุฑุณุงุฆู
 * - ุฅุญุตุงุฆูุงุช ุงูุฑุณุงุฆู
 */

import { useState } from 'react';
import { AdminLayout } from '@/components/AdminLayout';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import {
  MessageCircle,
  Send,
  Users,
  CheckCircle,
  XCircle,
  Clock,
  Download,
  Upload,
  FileText,
} from 'lucide-react';
import {
  sendWhatsAppMessage,
  sendOrderConfirmation,
  sendAccountApprovalNotification,
  sendAccountRejectionNotification,
  sendCommissionNotification,
  sendBulkMessages,
  formatPhoneNumber,
} from '@/lib/whatsapp-service';

export default function AdminWhatsAppManager() {
  const { toast } = useToast();
  const [loading, setLoading] = useState(false);

  // Single Message State
  const [singlePhone, setSinglePhone] = useState('');
  const [singleMessage, setSingleMessage] = useState('');

  // Bulk Message State
  const [bulkRecipients, setBulkRecipients] = useState('');
  const [bulkMessage, setBulkMessage] = useState('');
  const [bulkDelay, setBulkDelay] = useState('1000');

  // Template State
  const [selectedTemplate, setSelectedTemplate] = useState('');

  // Message Templates
  const templates = {
    welcome: {
      ar: '๐ ูุฑุญุจุงู ุจู ูู EgyGo!\n\nุดูุฑุงู ูุงูุถูุงูู ุฅูููุง. ูุญู ุณุนุฏุงุก ุจูุฌูุฏู ูุนูุง.\n\nุงุณุชูุชุน ุจุชุฌุฑุจุฉ ุชุณูู ูุฑูุฏุฉ!',
      en: '๐ Welcome to EgyGo!\n\nThank you for joining us. We are happy to have you.\n\nEnjoy a unique shopping experience!',
    },
    orderShipped: {
      ar: '๐ฆ ุชู ุดุญู ุทูุจู!\n\nุฑูู ุงูุทูุจ: {orderId}\nุฑูู ุงูุชุชุจุน: {trackingNumber}\n\nููููู ุชุชุจุน ุดุญูุชู ุงูุขู.',
      en: '๐ฆ Your order has been shipped!\n\nOrder: {orderId}\nTracking: {trackingNumber}\n\nYou can track your shipment now.',
    },
    flashSale: {
      ar: '๐ฅ ุนุฑุถ ุฎุงุต ูู 24 ุณุงุนุฉ ููุท!\n\nุฎุตู ูุตู ูู 50% ุนูู ููุชุฌุงุช ูุฎุชุงุฑุฉ.\n\nูุง ุชููุช ุงููุฑุตุฉ!',
      en: '๐ฅ Special offer for 24 hours only!\n\nUp to 50% off on selected products.\n\nDon\'t miss out!',
    },
    paymentReminder: {
      ar: '๐ณ ุชุฐููุฑ ุจุงูุฏูุน\n\nุฑูู ุงูุทูุจ: {orderId}\nุงููุจูุบ: {amount} ุฌ.ู\n\nูุฑุฌู ุฅุชูุงู ุงูุฏูุน ูุฅููุงู ุทูุจู.',
      en: '๐ณ Payment Reminder\n\nOrder: {orderId}\nAmount: {amount} EGP\n\nPlease complete payment to finalize your order.',
    },
  };

  // Send Single Message
  const handleSendSingle = async () => {
    if (!singlePhone || !singleMessage) {
      toast({
        title: 'ุฎุทุฃ',
        description: 'ูุฑุฌู ุฅุฏุฎุงู ุฑูู ุงููุงุชู ูุงูุฑุณุงูุฉ',
        variant: 'destructive',
      });
      return;
    }

    setLoading(true);
    try {
      const success = await sendWhatsAppMessage(singlePhone, singleMessage);
      
      if (success) {
        toast({
          title: 'ุชู ุงูุฅุฑุณุงู',
          description: 'ุชู ุฅุฑุณุงู ุงูุฑุณุงูุฉ ุจูุฌุงุญ',
        });
        setSingleMessage('');
      } else {
        throw new Error('Failed to send');
      }
    } catch (error) {
      toast({
        title: 'ุฎุทุฃ',
        description: 'ูุดู ูู ุฅุฑุณุงู ุงูุฑุณุงูุฉ',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  // Send Bulk Messages
  const handleSendBulk = async () => {
    if (!bulkRecipients || !bulkMessage) {
      toast({
        title: 'ุฎุทุฃ',
        description: 'ูุฑุฌู ุฅุฏุฎุงู ุฃุฑูุงู ุงูููุงุชู ูุงูุฑุณุงูุฉ',
        variant: 'destructive',
      });
      return;
    }

    const phones = bulkRecipients
      .split('\n')
      .map(p => p.trim())
      .filter(p => p.length > 0);

    if (phones.length === 0) {
      toast({
        title: 'ุฎุทุฃ',
        description: 'ูุง ุชูุฌุฏ ุฃุฑูุงู ุตุงูุญุฉ',
        variant: 'destructive',
      });
      return;
    }

    setLoading(true);
    try {
      const recipients = phones.map(phone => ({
        phone,
        message: bulkMessage,
      }));

      const result = await sendBulkMessages(recipients, parseInt(bulkDelay));

      toast({
        title: 'ุงูุชูู ุงูุฅุฑุณุงู',
        description: `ุชู ุฅุฑุณุงู ${result.success} ุฑุณุงูุฉ ุจูุฌุงุญุ ูุดู ${result.failed}`,
      });

      setBulkRecipients('');
      setBulkMessage('');
    } catch (error) {
      toast({
        title: 'ุฎุทุฃ',
        description: 'ูุดู ูู ุฅุฑุณุงู ุงูุฑุณุงุฆู',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  // Apply Template
  const applyTemplate = (templateKey: string, isBulk: boolean = false) => {
    const template = templates[templateKey as keyof typeof templates];
    if (template) {
      if (isBulk) {
        setBulkMessage(template.ar);
      } else {
        setSingleMessage(template.ar);
      }
      toast({
        title: 'ุชู ุงูุชุทุจูู',
        description: 'ุชู ุชุทุจูู ุงููุงูุจ',
      });
    }
  };

  return (
    <AdminLayout>
      <div className="space-y-6">
        {/* Header */}
        <div>
          <h1 className="text-3xl font-bold">ุฅุฏุงุฑุฉ WhatsApp</h1>
          <p className="text-muted-foreground">
            ุฅุฑุณุงู ูุฅุฏุงุฑุฉ ุฑุณุงุฆู ูุงุชุณุงุจ ููุนููุงุก
          </p>
        </div>

        {/* Stats */}
        <div className="grid gap-4 md:grid-cols-3">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">ุฑุณุงุฆู ุงูููู</CardTitle>
              <MessageCircle className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">156</div>
              <p className="text-xs text-muted-foreground">+12% ูู ุงูุฃูุณ</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">ูุณุจุฉ ุงููุฌุงุญ</CardTitle>
              <CheckCircle className="h-4 w-4 text-green-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">98.5%</div>
              <p className="text-xs text-muted-foreground">ูุนุฏู ุงูุชูุตูู</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">ุงููุณุชูููู</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">1,234</div>
              <p className="text-xs text-muted-foreground">ุฅุฌูุงูู ุงูุนููุงุก</p>
            </CardContent>
          </Card>
        </div>

        {/* Main Content */}
        <Tabs defaultValue="single" className="space-y-4">
          <TabsList>
            <TabsTrigger value="single">ุฑุณุงูุฉ ูุฑุฏูุฉ</TabsTrigger>
            <TabsTrigger value="bulk">ุฑุณุงูุฉ ุฌูุงุนูุฉ</TabsTrigger>
            <TabsTrigger value="templates">ุงูููุงูุจ</TabsTrigger>
            <TabsTrigger value="history">ุงูุณุฌู</TabsTrigger>
          </TabsList>

          {/* Single Message Tab */}
          <TabsContent value="single" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>ุฅุฑุณุงู ุฑุณุงูุฉ ูุฑุฏูุฉ</CardTitle>
                <CardDescription>
                  ุฃุฑุณู ุฑุณุงูุฉ ูุงุชุณุงุจ ูุนููู ูุงุญุฏ
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="singlePhone">ุฑูู ุงููุงุชู</Label>
                  <Input
                    id="singlePhone"
                    placeholder="01234567890"
                    value={singlePhone}
                    onChange={(e) => setSinglePhone(e.target.value)}
                  />
                  <p className="text-xs text-muted-foreground">
                    ุณูุชู ุฅุถุงูุฉ ููุฏ ูุตุฑ (+20) ุชููุงุฆูุงู
                  </p>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="singleMessage">ุงูุฑุณุงูุฉ</Label>
                  <Textarea
                    id="singleMessage"
                    placeholder="ุงูุชุจ ุฑุณุงูุชู ููุง..."
                    rows={6}
                    value={singleMessage}
                    onChange={(e) => setSingleMessage(e.target.value)}
                  />
                  <p className="text-xs text-muted-foreground">
                    {singleMessage.length} ุญุฑู
                  </p>
                </div>

                <div className="space-y-2">
                  <Label>ููุงูุจ ุณุฑูุนุฉ</Label>
                  <div className="flex flex-wrap gap-2">
                    {Object.keys(templates).map((key) => (
                      <Button
                        key={key}
                        variant="outline"
                        size="sm"
                        onClick={() => applyTemplate(key, false)}
                      >
                        <FileText className="h-4 w-4 ml-2" />
                        {key === 'welcome' && 'ุชุฑุญูุจ'}
                        {key === 'orderShipped' && 'ุดุญู ุงูุทูุจ'}
                        {key === 'flashSale' && 'ุนุฑุถ ุฎุงุต'}
                        {key === 'paymentReminder' && 'ุชุฐููุฑ ุจุงูุฏูุน'}
                      </Button>
                    ))}
                  </div>
                </div>

                <Button
                  onClick={handleSendSingle}
                  disabled={loading || !singlePhone || !singleMessage}
                  className="w-full"
                >
                  <Send className="h-4 w-4 ml-2" />
                  {loading ? 'ุฌุงุฑู ุงูุฅุฑุณุงู...' : 'ุฅุฑุณุงู ุงูุฑุณุงูุฉ'}
                </Button>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Bulk Message Tab */}
          <TabsContent value="bulk" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>ุฅุฑุณุงู ุฑุณุงูุฉ ุฌูุงุนูุฉ</CardTitle>
                <CardDescription>
                  ุฃุฑุณู ููุณ ุงูุฑุณุงูุฉ ูุนุฏุฉ ุนููุงุก ุฏูุนุฉ ูุงุญุฏุฉ
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="bulkRecipients">ุฃุฑูุงู ุงูููุงุชู</Label>
                  <Textarea
                    id="bulkRecipients"
                    placeholder="01234567890&#10;01098765432&#10;01555555555"
                    rows={6}
                    value={bulkRecipients}
                    onChange={(e) => setBulkRecipients(e.target.value)}
                  />
                  <p className="text-xs text-muted-foreground">
                    ุฃุฏุฎู ุฑูู ูุงุญุฏ ูู ูู ุณุทุฑ (
                    {bulkRecipients.split('\n').filter(p => p.trim()).length} ุฑูู)
                  </p>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="bulkMessage">ุงูุฑุณุงูุฉ</Label>
                  <Textarea
                    id="bulkMessage"
                    placeholder="ุงูุชุจ ุฑุณุงูุชู ููุง..."
                    rows={6}
                    value={bulkMessage}
                    onChange={(e) => setBulkMessage(e.target.value)}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="bulkDelay">ุงูุชุฃุฎูุฑ ุจูู ุงูุฑุณุงุฆู (ูููู ุซุงููุฉ)</Label>
                  <Input
                    id="bulkDelay"
                    type="number"
                    value={bulkDelay}
                    onChange={(e) => setBulkDelay(e.target.value)}
                  />
                  <p className="text-xs text-muted-foreground">
                    ููุตู ุจู: 1000-2000 ูุชุฌูุจ ุงูุญุธุฑ
                  </p>
                </div>

                <div className="space-y-2">
                  <Label>ููุงูุจ ุณุฑูุนุฉ</Label>
                  <div className="flex flex-wrap gap-2">
                    {Object.keys(templates).map((key) => (
                      <Button
                        key={key}
                        variant="outline"
                        size="sm"
                        onClick={() => applyTemplate(key, true)}
                      >
                        <FileText className="h-4 w-4 ml-2" />
                        {key === 'welcome' && 'ุชุฑุญูุจ'}
                        {key === 'orderShipped' && 'ุดุญู ุงูุทูุจ'}
                        {key === 'flashSale' && 'ุนุฑุถ ุฎุงุต'}
                        {key === 'paymentReminder' && 'ุชุฐููุฑ ุจุงูุฏูุน'}
                      </Button>
                    ))}
                  </div>
                </div>

                <Button
                  onClick={handleSendBulk}
                  disabled={loading || !bulkRecipients || !bulkMessage}
                  className="w-full"
                >
                  <Send className="h-4 w-4 ml-2" />
                  {loading ? 'ุฌุงุฑู ุงูุฅุฑุณุงู...' : 'ุฅุฑุณุงู ููุฌููุน'}
                </Button>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Templates Tab */}
          <TabsContent value="templates" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>ููุงูุจ ุงูุฑุณุงุฆู</CardTitle>
                <CardDescription>
                  ููุงูุจ ุฌุงูุฒุฉ ููููู ุงุณุชุฎุฏุงููุง
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {Object.entries(templates).map(([key, template]) => (
                  <Card key={key}>
                    <CardHeader>
                      <CardTitle className="text-lg">
                        {key === 'welcome' && '๐ ุฑุณุงูุฉ ุชุฑุญูุจ'}
                        {key === 'orderShipped' && '๐ฆ ุดุญู ุงูุทูุจ'}
                        {key === 'flashSale' && '๐ฅ ุนุฑุถ ุฎุงุต'}
                        {key === 'paymentReminder' && '๐ณ ุชุฐููุฑ ุจุงูุฏูุน'}
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-2">
                      <div className="bg-muted p-3 rounded-md font-mono text-sm whitespace-pre-wrap">
                        {template.ar}
                      </div>
                      <div className="flex gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => applyTemplate(key, false)}
                        >
                          ุงุณุชุฎุฏุงู ูู ุฑุณุงูุฉ ูุฑุฏูุฉ
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => applyTemplate(key, true)}
                        >
                          ุงุณุชุฎุฏุงู ูู ุฑุณุงูุฉ ุฌูุงุนูุฉ
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </CardContent>
            </Card>
          </TabsContent>

          {/* History Tab */}
          <TabsContent value="history" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>ุณุฌู ุงูุฑุณุงุฆู</CardTitle>
                <CardDescription>
                  ุขุฎุฑ ุงูุฑุณุงุฆู ุงููุฑุณูุฉ
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {[1, 2, 3].map((i) => (
                    <div key={i} className="flex items-start gap-4 p-4 border rounded-lg">
                      <div className="flex-shrink-0">
                        <CheckCircle className="h-5 w-5 text-green-600" />
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className="font-medium">+20 123 456 789{i}</p>
                        <p className="text-sm text-muted-foreground truncate">
                          ูุฑุญุจุงู! ุทูุจู ุฑูู #{1000 + i} ูู ุงูุทุฑูู ุฅููู...
                        </p>
                        <div className="flex items-center gap-2 mt-1">
                          <Badge variant="outline" className="text-xs">
                            <Clock className="h-3 w-3 ml-1" />
                            ููุฐ {i} ุณุงุนุฉ
                          </Badge>
                          <Badge variant="secondary" className="text-xs">
                            ุชู ุงูุชูุตูู
                          </Badge>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </AdminLayout>
  );
}
