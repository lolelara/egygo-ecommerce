{"version":3,"file":"vendoor-processor-ChBC2yBy.js","sources":["../../server/lib/vendoor-processor.ts"],"sourcesContent":["import { Client, Databases, Storage, ID, Query } from 'node-appwrite';\nimport axios from 'axios';\n\n// Appwrite Configuration\nconst client = new Client()\n  .setEndpoint(process.env.APPWRITE_ENDPOINT || 'https://cloud.appwrite.io/v1')\n  .setProject(process.env.APPWRITE_PROJECT_ID || '')\n  .setKey(process.env.APPWRITE_API_KEY || '');\n\nconst databases = new Databases(client);\nconst storage = new Storage(client);\n\nconst DATABASE_ID = process.env.APPWRITE_DATABASE_ID || '';\nconst PRODUCTS_COLLECTION_ID = 'products';\nconst CATEGORIES_COLLECTION_ID = 'categories';\nconst STORAGE_BUCKET_ID = process.env.APPWRITE_STORAGE_BUCKET_ID || 'product-images';\n\ninterface VendoorProduct {\n  id: string;\n  title: string;\n  supplier: string;\n  price: string;\n  commission: string;\n  stock: string;\n  image: string;\n}\n\ninterface ProcessedProduct {\n  name: string;\n  description: string;\n  price: number;\n  originalPrice: number;\n  vendoorPrice: number;\n  vendoorCommission: number;\n  stock: number;\n  images: string[];\n  categoryId: string;\n  categoryName: string;\n  supplier: string;\n  vendoorId: string;\n  isActive: boolean;\n  source: string;\n}\n\n/**\n * معالجة السعر من نص إلى رقم\n */\nexport function parsePrice(priceText: string): number {\n  if (!priceText) return 0;\n  // إزالة كل شيء ما عدا الأرقام والنقطة العشرية\n  const cleaned = priceText.replace(/[^\\d.]/g, '');\n  const price = parseFloat(cleaned);\n  return isNaN(price) ? 0 : price;\n}\n\n/**\n * معالجة المخزون من نص إلى رقم\n */\nexport function parseStock(stockText: string): number {\n  if (!stockText) return 0;\n  // استخراج الرقم الأول من النص\n  const match = stockText.match(/(\\d+)/);\n  if (match) {\n    const stock = parseInt(match[1]);\n    return isNaN(stock) ? 0 : stock;\n  }\n  return 0;\n}\n\n/**\n * رفع صورة إلى Appwrite Storage\n */\nexport async function uploadImageToAppwrite(imageUrl: string, productId: string): Promise<string> {\n  try {\n    // تحميل الصورة من URL\n    const response = await axios.get(imageUrl, {\n      responseType: 'arraybuffer',\n      timeout: 30000,\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      }\n    });\n\n    // تحديد نوع الملف\n    const contentType = response.headers['content-type'] || 'image/jpeg';\n    const extension = contentType.split('/')[1] || 'jpg';\n    const fileName = `vendoor-${productId}-${Date.now()}.${extension}`;\n\n    // رفع إلى Appwrite Storage\n    const buffer = Buffer.from(response.data);\n    const file = await storage.createFile(\n      STORAGE_BUCKET_ID,\n      ID.unique(),\n      buffer as any // Appwrite SDK accepts Buffer in Node.js\n    );\n\n    // إرجاع URL الصورة\n    const fileUrl = `${process.env.APPWRITE_ENDPOINT}/storage/buckets/${STORAGE_BUCKET_ID}/files/${file.$id}/view?project=${process.env.APPWRITE_PROJECT_ID}`;\n    \n    return fileUrl;\n  } catch (error) {\n    console.error('Error uploading image:', error);\n    // في حالة الفشل، نرجع الرابط الأصلي\n    return imageUrl;\n  }\n}\n\n/**\n * البحث عن تصنيف أو إنشاؤه\n */\nexport async function findOrCreateCategory(categoryName: string): Promise<string> {\n  try {\n    // البحث عن التصنيف الموجود\n    const existingCategories = await databases.listDocuments(\n      DATABASE_ID,\n      CATEGORIES_COLLECTION_ID,\n      [\n        Query.equal('name', categoryName),\n        Query.limit(1)\n      ]\n    );\n\n    if (existingCategories.documents.length > 0) {\n      console.log(`✅ Found existing category: ${categoryName}`);\n      return existingCategories.documents[0].$id;\n    }\n\n    // إنشاء تصنيف جديد\n    console.log(`📁 Creating new category: ${categoryName}`);\n    const newCategory = await databases.createDocument(\n      DATABASE_ID,\n      CATEGORIES_COLLECTION_ID,\n      ID.unique(),\n      {\n        name: categoryName,\n        slug: categoryName.toLowerCase().replace(/\\s+/g, '-').replace(/[^\\w\\-]/g, ''),\n        description: `منتجات ${categoryName} من Vendoor`,\n        isActive: true,\n        productCount: 0,\n        image: '',\n        createdAt: new Date().toISOString()\n      }\n    );\n\n    return newCategory.$id;\n  } catch (error) {\n    console.error('Error finding/creating category:', error);\n    \n    // في حالة الفشل، نحاول إنشاء تصنيف افتراضي\n    try {\n      const defaultCategory = await databases.createDocument(\n        DATABASE_ID,\n        CATEGORIES_COLLECTION_ID,\n        ID.unique(),\n        {\n          name: 'منتجات Vendoor',\n          slug: 'vendoor-products',\n          description: 'منتجات مستوردة من Vendoor',\n          isActive: true,\n          productCount: 0,\n          image: '',\n          createdAt: new Date().toISOString()\n        }\n      );\n      return defaultCategory.$id;\n    } catch (err) {\n      throw new Error('فشل في إنشاء التصنيف');\n    }\n  }\n}\n\n/**\n * معالجة منتج Vendoor وتحويله إلى صيغة قابلة للحفظ\n */\nexport async function processVendoorProduct(\n  vendoorProduct: VendoorProduct,\n  userId: string,\n  userName: string,\n  markupPercentage: number = 20\n): Promise<ProcessedProduct> {\n  // معالجة الأسعار\n  const vendoorPrice = parsePrice(vendoorProduct.price);\n  const vendoorCommission = parsePrice(vendoorProduct.commission);\n  const stock = parseStock(vendoorProduct.stock);\n\n  // حساب السعر النهائي (السعر الأصلي + الهامش)\n  const markup = vendoorPrice * (markupPercentage / 100);\n  const finalPrice = Math.round((vendoorPrice + markup) * 100) / 100;\n\n  // رفع الصورة إلى Appwrite\n  let uploadedImage = vendoorProduct.image;\n  if (vendoorProduct.image && vendoorProduct.image.startsWith('http')) {\n    try {\n      uploadedImage = await uploadImageToAppwrite(vendoorProduct.image, vendoorProduct.id);\n      console.log(`✅ Image uploaded for product ${vendoorProduct.id}`);\n    } catch (error) {\n      console.log(`⚠️ Failed to upload image, using original URL`);\n    }\n  }\n\n  // تحديد اسم التصنيف من اسم المورد أو استخدام افتراضي\n  const categoryName = vendoorProduct.supplier || 'منتجات Vendoor';\n  const categoryId = await findOrCreateCategory(categoryName);\n\n  return {\n    name: vendoorProduct.title,\n    description: `${vendoorProduct.title}\\n\\nالمورد: ${vendoorProduct.supplier}\\nالمخزون: ${vendoorProduct.stock}`,\n    price: finalPrice,\n    originalPrice: vendoorPrice,\n    vendoorPrice: vendoorPrice,\n    vendoorCommission: vendoorCommission,\n    stock: stock,\n    images: [uploadedImage],\n    categoryId: categoryId,\n    categoryName: categoryName,\n    supplier: vendoorProduct.supplier,\n    vendoorId: vendoorProduct.id,\n    isActive: stock > 0,\n    source: 'vendoor'\n  };\n}\n\n/**\n * حفظ منتج في Appwrite\n */\nexport async function saveProductToAppwrite(\n  processedProduct: ProcessedProduct,\n  userId: string,\n  userName: string\n): Promise<any> {\n  try {\n    // التحقق من عدم وجود المنتج مسبقاً\n    const existingProducts = await databases.listDocuments(\n      DATABASE_ID,\n      PRODUCTS_COLLECTION_ID,\n      [\n        Query.equal('vendoorId', processedProduct.vendoorId),\n        Query.limit(1)\n      ]\n    );\n\n    if (existingProducts.documents.length > 0) {\n      console.log(`⚠️ Product ${processedProduct.vendoorId} already exists, updating...`);\n      \n      // تحديث المنتج الموجود\n      const updated = await databases.updateDocument(\n        DATABASE_ID,\n        PRODUCTS_COLLECTION_ID,\n        existingProducts.documents[0].$id,\n        {\n          name: processedProduct.name,\n          price: processedProduct.price,\n          stock: processedProduct.stock,\n          isActive: processedProduct.isActive,\n          updatedAt: new Date().toISOString()\n        }\n      );\n      \n      return { ...updated, isNew: false };\n    }\n\n    // إنشاء منتج جديد\n    const newProduct = await databases.createDocument(\n      DATABASE_ID,\n      PRODUCTS_COLLECTION_ID,\n      ID.unique(),\n      {\n        name: processedProduct.name,\n        description: processedProduct.description,\n        price: processedProduct.price,\n        originalPrice: processedProduct.originalPrice,\n        vendoorPrice: processedProduct.vendoorPrice,\n        vendoorCommission: processedProduct.vendoorCommission,\n        stock: processedProduct.stock,\n        images: processedProduct.images,\n        categoryId: processedProduct.categoryId,\n        merchantId: userId,\n        merchantName: userName,\n        vendoorId: processedProduct.vendoorId,\n        supplier: processedProduct.supplier,\n        source: processedProduct.source,\n        isActive: processedProduct.isActive,\n        isFeatured: false,\n        rating: 0,\n        reviewCount: 0,\n        soldCount: 0,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      }\n    );\n\n    // تحديث عدد المنتجات في التصنيف\n    try {\n      const category = await databases.getDocument(\n        DATABASE_ID,\n        CATEGORIES_COLLECTION_ID,\n        processedProduct.categoryId\n      );\n      \n      await databases.updateDocument(\n        DATABASE_ID,\n        CATEGORIES_COLLECTION_ID,\n        processedProduct.categoryId,\n        {\n          productCount: (category.productCount || 0) + 1\n        }\n      );\n    } catch (error) {\n      console.error('Error updating category count:', error);\n    }\n\n    return { ...newProduct, isNew: true };\n  } catch (error) {\n    console.error('Error saving product to Appwrite:', error);\n    throw error;\n  }\n}\n\n/**\n * معالجة وحفظ منتج Vendoor بالكامل\n */\nexport async function importVendoorProduct(\n  vendoorProduct: VendoorProduct,\n  userId: string,\n  userName: string,\n  markupPercentage: number = 20\n): Promise<any> {\n  console.log(`📦 Processing Vendoor product: ${vendoorProduct.id} - ${vendoorProduct.title}`);\n  \n  // معالجة المنتج\n  const processedProduct = await processVendoorProduct(\n    vendoorProduct,\n    userId,\n    userName,\n    markupPercentage\n  );\n  \n  // حفظ في Appwrite\n  const savedProduct = await saveProductToAppwrite(\n    processedProduct,\n    userId,\n    userName\n  );\n  \n  console.log(`✅ Product ${vendoorProduct.id} ${savedProduct.isNew ? 'created' : 'updated'} successfully`);\n  \n  return savedProduct;\n}\n\n/**\n * تحديث منتجات Vendoor الموجودة\n */\nexport async function updateVendoorProducts(\n  vendoorProducts: VendoorProduct[]\n): Promise<{ updated: number; failed: number }> {\n  let updated = 0;\n  let failed = 0;\n\n  for (const vendoorProduct of vendoorProducts) {\n    try {\n      // البحث عن المنتج في قاعدة البيانات\n      const existingProducts = await databases.listDocuments(\n        DATABASE_ID,\n        PRODUCTS_COLLECTION_ID,\n        [\n          Query.equal('vendoorId', vendoorProduct.id),\n          Query.limit(1)\n        ]\n      );\n\n      if (existingProducts.documents.length > 0) {\n        const product = existingProducts.documents[0];\n        \n        // تحديث السعر والمخزون\n        await databases.updateDocument(\n          DATABASE_ID,\n          PRODUCTS_COLLECTION_ID,\n          product.$id,\n          {\n            vendoorPrice: parsePrice(vendoorProduct.price),\n            vendoorCommission: parsePrice(vendoorProduct.commission),\n            stock: parseStock(vendoorProduct.stock),\n            isActive: parseStock(vendoorProduct.stock) > 0,\n            updatedAt: new Date().toISOString()\n          }\n        );\n\n        updated++;\n        console.log(`✅ Updated product ${vendoorProduct.id}`);\n      }\n    } catch (error) {\n      console.error(`❌ Failed to update product ${vendoorProduct.id}:`, error);\n      failed++;\n    }\n  }\n\n  return { updated, failed };\n}\n"],"names":[],"mappings":"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"}