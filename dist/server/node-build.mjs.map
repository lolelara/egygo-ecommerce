{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../shared/db.ts","../../server/routes/products.ts","../../server/routes/categories.ts","../../server/routes/admin.ts","../../server/routes/auth.ts","../../server/routes/orders.ts","../../server/routes/reviews.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: [\"query\"],\n  });\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n","import { RequestHandler } from \"express\";\nimport { prisma } from \"@shared/db\";\nimport {\n  ProductListResponse,\n  ProductFilters,\n  PaginationParams,\n} from \"@shared/prisma-types\";\n\nexport const getProducts: RequestHandler = async (req, res) => {\n  try {\n    const {\n      categoryId,\n      minPrice,\n      maxPrice,\n      inStock,\n      searchQuery,\n      sortBy = \"featured\",\n      page = 1,\n      limit = 12,\n    } = req.query as Partial<\n      ProductFilters & PaginationParams & { page: string; limit: string }\n    >;\n\n    const skip = (Number(page) - 1) * Number(limit);\n    const take = Number(limit);\n\n    // Build where clause\n    const where: any = {};\n\n    if (categoryId) {\n      where.categoryId = categoryId;\n    }\n\n    if (minPrice || maxPrice) {\n      where.price = {};\n      if (minPrice) where.price.gte = Number(minPrice);\n      if (maxPrice) where.price.lte = Number(maxPrice);\n    }\n\n    if (inStock !== undefined) {\n      where.inStock = inStock === \"true\";\n    }\n\n    if (searchQuery) {\n      where.OR = [\n        { name: { contains: searchQuery, mode: \"insensitive\" } },\n        { description: { contains: searchQuery, mode: \"insensitive\" } },\n        {\n          tags: {\n            some: { name: { contains: searchQuery, mode: \"insensitive\" } },\n          },\n        },\n      ];\n    }\n\n    // Build orderBy clause\n    let orderBy: any = {};\n    switch (sortBy) {\n      case \"price_asc\":\n        orderBy = { price: \"asc\" };\n        break;\n      case \"price_desc\":\n        orderBy = { price: \"desc\" };\n        break;\n      case \"rating\":\n        orderBy = { rating: \"desc\" };\n        break;\n      case \"newest\":\n        orderBy = { createdAt: \"desc\" };\n        break;\n      default:\n        // Featured: sort by rating * reviewCount\n        orderBy = [{ rating: \"desc\" }, { reviewCount: \"desc\" }];\n    }\n\n    const [products, total] = await Promise.all([\n      prisma.product.findMany({\n        where,\n        orderBy,\n        skip,\n        take,\n        include: {\n          category: true,\n          images: {\n            orderBy: { order: \"asc\" },\n          },\n          tags: true,\n          reviews: {\n            include: {\n              user: true,\n            },\n            orderBy: { createdAt: \"desc\" },\n            take: 5,\n          },\n          _count: {\n            select: { reviews: true },\n          },\n        },\n      }),\n      prisma.product.count({ where }),\n    ]);\n\n    const response: ProductListResponse = {\n      products,\n      total,\n      page: Number(page),\n      limit: Number(limit),\n    };\n\n    res.json(response);\n  } catch (error) {\n    console.error(\"Error fetching products:\", error);\n    res.status(500).json({ error: \"فشل في جلب المنتجات\" });\n  }\n};\n\nexport const getProductById: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const product = await prisma.product.findUnique({\n      where: { id },\n      include: {\n        category: true,\n        images: {\n          orderBy: { order: \"asc\" },\n        },\n        tags: true,\n        reviews: {\n          include: {\n            user: true,\n          },\n          orderBy: { createdAt: \"desc\" },\n        },\n        _count: {\n          select: { reviews: true },\n        },\n      },\n    });\n\n    if (!product) {\n      return res.status(404).json({ error: \"ا��منتج غير موجود\" });\n    }\n\n    res.json(product);\n  } catch (error) {\n    console.error(\"Error fetching product:\", error);\n    res.status(500).json({ error: \"فشل في جلب المنتج\" });\n  }\n};\n\nexport const getProductsByCategory: RequestHandler = async (req, res) => {\n  try {\n    const { slug } = req.params;\n    const {\n      minPrice,\n      maxPrice,\n      inStock,\n      searchQuery,\n      sortBy = \"featured\",\n      page = 1,\n      limit = 12,\n    } = req.query as Partial<\n      ProductFilters & PaginationParams & { page: string; limit: string }\n    >;\n\n    // Find category by slug\n    const category = await prisma.category.findUnique({\n      where: { slug },\n    });\n\n    if (!category) {\n      return res.status(404).json({ error: \"الفئة غير موجودة\" });\n    }\n\n    // Get products in this category\n    const skip = (Number(page) - 1) * Number(limit);\n    const take = Number(limit);\n\n    const where: any = { categoryId: category.id };\n\n    if (minPrice || maxPrice) {\n      where.price = {};\n      if (minPrice) where.price.gte = Number(minPrice);\n      if (maxPrice) where.price.lte = Number(maxPrice);\n    }\n\n    if (inStock !== undefined) {\n      where.inStock = inStock === \"true\";\n    }\n\n    if (searchQuery) {\n      where.OR = [\n        { name: { contains: searchQuery, mode: \"insensitive\" } },\n        { description: { contains: searchQuery, mode: \"insensitive\" } },\n        {\n          tags: {\n            some: { name: { contains: searchQuery, mode: \"insensitive\" } },\n          },\n        },\n      ];\n    }\n\n    let orderBy: any = {};\n    switch (sortBy) {\n      case \"price_asc\":\n        orderBy = { price: \"asc\" };\n        break;\n      case \"price_desc\":\n        orderBy = { price: \"desc\" };\n        break;\n      case \"rating\":\n        orderBy = { rating: \"desc\" };\n        break;\n      case \"newest\":\n        orderBy = { createdAt: \"desc\" };\n        break;\n      default:\n        orderBy = [{ rating: \"desc\" }, { reviewCount: \"desc\" }];\n    }\n\n    const [products, total] = await Promise.all([\n      prisma.product.findMany({\n        where,\n        orderBy,\n        skip,\n        take,\n        include: {\n          category: true,\n          images: {\n            orderBy: { order: \"asc\" },\n          },\n          tags: true,\n          reviews: {\n            include: {\n              user: true,\n            },\n            orderBy: { createdAt: \"desc\" },\n            take: 5,\n          },\n          _count: {\n            select: { reviews: true },\n          },\n        },\n      }),\n      prisma.product.count({ where }),\n    ]);\n\n    const response: ProductListResponse = {\n      products,\n      total,\n      page: Number(page),\n      limit: Number(limit),\n    };\n\n    res.json(response);\n  } catch (error) {\n    console.error(\"Error fetching products by category:\", error);\n    res.status(500).json({ error: \"فشل في جلب منتجات الفئة\" });\n  }\n};\n","import { RequestHandler } from \"express\";\nimport { prisma } from \"@shared/db\";\nimport { CategoryListResponse } from \"@shared/prisma-types\";\n\nexport const getCategories: RequestHandler = async (req, res) => {\n  try {\n    const categories = await prisma.category.findMany({\n      orderBy: { name: \"asc\" },\n    });\n\n    const response: CategoryListResponse = {\n      categories,\n    };\n\n    res.json(response);\n  } catch (error) {\n    console.error(\"Error fetching categories:\", error);\n    res.status(500).json({ error: \"فشل في جلب الفئات\" });\n  }\n};\n\nexport const getCategoryBySlug: RequestHandler = async (req, res) => {\n  try {\n    const { slug } = req.params;\n\n    const category = await prisma.category.findUnique({\n      where: { slug },\n    });\n\n    if (!category) {\n      return res.status(404).json({ error: \"الفئة غير موجودة\" });\n    }\n\n    res.json(category);\n  } catch (error) {\n    console.error(\"Error fetching category:\", error);\n    res.status(500).json({ error: \"فشل في جلب الفئة\" });\n  }\n};\n\nexport const updateCategoryProductCount: RequestHandler = async (req, res) => {\n  try {\n    // Update product counts for all categories\n    const categories = await prisma.category.findMany();\n\n    for (const category of categories) {\n      const productCount = await prisma.product.count({\n        where: { categoryId: category.id },\n      });\n\n      await prisma.category.update({\n        where: { id: category.id },\n        data: { productCount },\n      });\n    }\n\n    res.json({ message: \"تم تحديث عدد المنتجات في الفئات بنجاح\" });\n  } catch (error) {\n    console.error(\"Error updating category product counts:\", error);\n    res.status(500).json({ error: \"فشل في تحديث عدد المنتجات\" });\n  }\n};\n","import { RequestHandler } from \"express\";\nimport { prisma } from \"@shared/db\";\nimport type {\n  AdminStats,\n  User,\n  Product,\n  Category,\n  Order,\n  Commission,\n} from \"@shared/api\";\n\n// Get admin dashboard stats\nexport const getAdminStats: RequestHandler = async (req, res) => {\n  try {\n    const [\n      totalUsers,\n      totalProducts,\n      totalOrders,\n      totalAffiliates,\n      pendingOrders,\n      pendingCommissions,\n      orders,\n      products,\n    ] = await Promise.all([\n      prisma.user.count(),\n      prisma.product.count(),\n      prisma.order.count(),\n      prisma.affiliateUser.count(),\n      prisma.order.count({ where: { status: \"PENDING\" } }),\n      prisma.commission.aggregate({\n        where: { status: \"PENDING\" },\n        _sum: { amount: true },\n      }),\n      prisma.order.findMany({\n        include: { items: { include: { product: true } } },\n        orderBy: { createdAt: \"desc\" },\n      }),\n      prisma.product.findMany({\n        include: {\n          orderItems: true,\n          category: true,\n        },\n        orderBy: { createdAt: \"desc\" },\n      }),\n    ]);\n\n    // Calculate revenue\n    const totalRevenue = orders.reduce((sum, order) => sum + order.total, 0);\n    const thisMonth = new Date();\n    thisMonth.setDate(1);\n\n    const thisMonthOrders = orders.filter(\n      (order) => new Date(order.createdAt) >= thisMonth,\n    );\n    const thisMonthRevenue = thisMonthOrders.reduce(\n      (sum, order) => sum + order.total,\n      0,\n    );\n\n    // Get top selling products\n    const productSales = products\n      .map((product) => {\n        const soldQuantity = product.orderItems.reduce(\n          (sum, item) => sum + item.quantity,\n          0,\n        );\n        const revenue = product.orderItems.reduce(\n          (sum, item) => sum + item.total,\n          0,\n        );\n        return {\n          product: {\n            id: product.id,\n            name: product.name,\n            description: product.description,\n            price: product.price,\n            originalPrice: product.originalPrice || undefined,\n            images: [], // Will be populated from images relation\n            category: product.categoryId,\n            tags: [], // Will be populated from tags relation\n            inStock: product.inStock,\n            rating: product.rating,\n            reviewCount: product.reviewCount,\n            affiliateCommission: product.affiliateCommission,\n          },\n          soldQuantity,\n          revenue,\n        };\n      })\n      .sort((a, b) => b.soldQuantity - a.soldQuantity)\n      .slice(0, 5);\n\n    // Get recent orders\n    const recentOrders = orders.slice(0, 5).map((order) => ({\n      id: order.id,\n      orderNumber: order.orderNumber,\n      status: order.status as Order[\"status\"],\n      total: order.total,\n      subtotal: order.subtotal,\n      tax: order.tax,\n      shipping: order.shipping,\n      discount: order.discount,\n      shippingAddress: order.shippingAddress,\n      billingAddress: order.billingAddress,\n      paymentMethod: order.paymentMethod,\n      paymentStatus: order.paymentStatus as Order[\"paymentStatus\"],\n      createdAt: order.createdAt.toISOString(),\n      updatedAt: order.updatedAt.toISOString(),\n      userId: order.userId,\n      items: order.items.map((item) => ({\n        id: item.id,\n        quantity: item.quantity,\n        price: item.price,\n        total: item.total,\n        productId: item.productId,\n        product: {\n          id: item.product.id,\n          name: item.product.name,\n          description: item.product.description,\n          price: item.product.price,\n          originalPrice: item.product.originalPrice || undefined,\n          images: [], // Populate from images relation\n          category: item.product.categoryId,\n          tags: [], // Populate from tags relation\n          inStock: item.product.inStock,\n          rating: item.product.rating,\n          reviewCount: item.product.reviewCount,\n          affiliateCommission: item.product.affiliateCommission,\n        },\n      })),\n    }));\n\n    const stats: AdminStats = {\n      totalUsers,\n      totalProducts,\n      totalOrders,\n      totalRevenue,\n      pendingOrders,\n      totalAffiliates,\n      pendingCommissions: pendingCommissions._sum.amount || 0,\n      thisMonthRevenue,\n      thisMonthOrders: thisMonthOrders.length,\n      topSellingProducts: productSales,\n      recentOrders,\n    };\n\n    res.json(stats);\n  } catch (error) {\n    console.error(\"Error fetching admin stats:\", error);\n    res.status(500).json({ error: \"فشل في جلب إحصائيات لوحة التحكم\" });\n  }\n};\n\n// Admin Products Management\nexport const createProduct: RequestHandler = async (req, res) => {\n  try {\n    const {\n      name,\n      description,\n      price,\n      originalPrice,\n      categoryId,\n      images,\n      tags,\n      stockQuantity,\n      affiliateCommission,\n    } = req.body;\n\n    const product = await prisma.product.create({\n      data: {\n        name,\n        description,\n        price,\n        originalPrice,\n        categoryId,\n        stockQuantity,\n        affiliateCommission,\n        inStock: stockQuantity > 0,\n        images: {\n          create: images.map((url: string, index: number) => ({\n            url,\n            order: index,\n          })),\n        },\n        tags: {\n          connectOrCreate: tags.map((tagName: string) => ({\n            where: { name: tagName },\n            create: { name: tagName },\n          })),\n        },\n      },\n      include: {\n        category: true,\n        images: true,\n        tags: true,\n      },\n    });\n\n    res.status(201).json(product);\n  } catch (error) {\n    console.error(\"Error creating product:\", error);\n    res.status(500).json({ error: \"فشل في إنشاء المنتج\" });\n  }\n};\n\nexport const updateProduct: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const {\n      name,\n      description,\n      price,\n      originalPrice,\n      categoryId,\n      images,\n      tags,\n      stockQuantity,\n      affiliateCommission,\n    } = req.body;\n\n    // Delete existing images and tags\n    await prisma.productImage.deleteMany({ where: { productId: id } });\n    await prisma.product.update({\n      where: { id },\n      data: { tags: { set: [] } },\n    });\n\n    const product = await prisma.product.update({\n      where: { id },\n      data: {\n        name,\n        description,\n        price,\n        originalPrice,\n        categoryId,\n        stockQuantity,\n        affiliateCommission,\n        inStock: stockQuantity > 0,\n        images: {\n          create: images.map((url: string, index: number) => ({\n            url,\n            order: index,\n          })),\n        },\n        tags: {\n          connectOrCreate: tags.map((tagName: string) => ({\n            where: { name: tagName },\n            create: { name: tagName },\n          })),\n        },\n      },\n      include: {\n        category: true,\n        images: true,\n        tags: true,\n      },\n    });\n\n    res.json(product);\n  } catch (error) {\n    console.error(\"Error updating product:\", error);\n    res.status(500).json({ error: \"فشل في تحديث المنتج\" });\n  }\n};\n\nexport const deleteProduct: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    await prisma.product.delete({\n      where: { id },\n    });\n\n    res.json({ message: \"تم حذف المنتج بنجاح\" });\n  } catch (error) {\n    console.error(\"Error deleting product:\", error);\n    res.status(500).json({ error: \"فشل في حذف المنتج\" });\n  }\n};\n\n// Admin Categories Management\nexport const createCategory: RequestHandler = async (req, res) => {\n  try {\n    const { name, slug, description, image } = req.body;\n\n    const category = await prisma.category.create({\n      data: {\n        name,\n        slug,\n        description,\n        image,\n      },\n    });\n\n    res.status(201).json(category);\n  } catch (error) {\n    console.error(\"Error creating category:\", error);\n    res.status(500).json({ error: \"فشل في إنشاء الفئة\" });\n  }\n};\n\nexport const updateCategory: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { name, slug, description, image } = req.body;\n\n    const category = await prisma.category.update({\n      where: { id },\n      data: {\n        name,\n        slug,\n        description,\n        image,\n      },\n    });\n\n    res.json(category);\n  } catch (error) {\n    console.error(\"Error updating category:\", error);\n    res.status(500).json({ error: \"فشل في تحديث الفئة\" });\n  }\n};\n\nexport const deleteCategory: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    await prisma.category.delete({\n      where: { id },\n    });\n\n    res.json({ message: \"تم حذف الفئة بنجاح\" });\n  } catch (error) {\n    console.error(\"Error deleting category:\", error);\n    res.status(500).json({ error: \"فشل في حذف الفئة\" });\n  }\n};\n\n// Admin Users Management\nexport const getUsers: RequestHandler = async (req, res) => {\n  try {\n    const users = await prisma.user.findMany({\n      orderBy: { createdAt: \"desc\" },\n      include: {\n        affiliate: true,\n      },\n    });\n\n    res.json(users);\n  } catch (error) {\n    console.error(\"Error fetching users:\", error);\n    res.status(500).json({ error: \"فشل في جلب المستخدمين\" });\n  }\n};\n\nexport const updateUserRole: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { role, isActive } = req.body;\n\n    const user = await prisma.user.update({\n      where: { id },\n      data: { role, isActive },\n    });\n\n    res.json(user);\n  } catch (error) {\n    console.error(\"Error updating user:\", error);\n    res.status(500).json({ error: \"فشل في تحديث المستخدم\" });\n  }\n};\n\n// Admin Orders Management\nexport const getOrders: RequestHandler = async (req, res) => {\n  try {\n    const orders = await prisma.order.findMany({\n      include: {\n        user: true,\n        items: {\n          include: {\n            product: true,\n          },\n        },\n      },\n      orderBy: { createdAt: \"desc\" },\n    });\n\n    res.json(orders);\n  } catch (error) {\n    console.error(\"Error fetching orders:\", error);\n    res.status(500).json({ error: \"فشل في جلب الطلبات\" });\n  }\n};\n\nexport const updateOrderStatus: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { status } = req.body;\n\n    const order = await prisma.order.update({\n      where: { id },\n      data: { status },\n      include: {\n        user: true,\n        items: {\n          include: {\n            product: true,\n          },\n        },\n      },\n    });\n\n    res.json(order);\n  } catch (error) {\n    console.error(\"Error updating order:\", error);\n    res.status(500).json({ error: \"فشل في تحديث الطلب\" });\n  }\n};\n\n// Admin Commissions Management\nexport const getCommissions: RequestHandler = async (req, res) => {\n  try {\n    const commissions = await prisma.commission.findMany({\n      include: {\n        affiliate: {\n          include: {\n            user: true,\n          },\n        },\n        order: true,\n      },\n      orderBy: { createdAt: \"desc\" },\n    });\n\n    res.json(commissions);\n  } catch (error) {\n    console.error(\"Error fetching commissions:\", error);\n    res.status(500).json({ error: \"فشل في جلب العمولات\" });\n  }\n};\n\nexport const updateCommissionStatus: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { status } = req.body;\n\n    const commission = await prisma.commission.update({\n      where: { id },\n      data: { status },\n      include: {\n        affiliate: {\n          include: {\n            user: true,\n          },\n        },\n        order: true,\n      },\n    });\n\n    res.json(commission);\n  } catch (error) {\n    console.error(\"Error updating commission:\", error);\n    res.status(500).json({ error: \"فشل في تحديث العمولة\" });\n  }\n};\n","import { RequestHandler } from \"express\";\nimport { prisma } from \"@shared/db\";\nimport { User } from \"@shared/api\";\n\n// Simple auth system - in production use proper JWT, bcrypt, etc.\nexport const login: RequestHandler = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      return res\n        .status(400)\n        .json({ error: \"البريد الإلكتروني وكلمة المرور مطلوبان\" });\n    }\n\n    // Find user by email\n    const user = await prisma.user.findUnique({\n      where: { email },\n      include: { affiliate: true },\n    });\n\n    if (!user) {\n      return res\n        .status(401)\n        .json({ error: \"البريد الإلكتروني أو كلمة المرور غير صحيح\" });\n    }\n\n    if (!user.isActive) {\n      return res.status(401).json({ error: \"الحساب معطل\" });\n    }\n\n    // For demo purposes, we'll accept simple passwords\n    // In production, use bcrypt to hash and compare passwords\n    const validPasswords: { [key: string]: string } = {\n      \"admin@example.com\": \"admin123\",\n      \"superadmin@example.com\": \"superadmin123\",\n      \"user@example.com\": \"user123\",\n    };\n\n    if (password !== validPasswords[email]) {\n      return res\n        .status(401)\n        .json({ error: \"البريد الإلكتروني أو كلمة المرور غير صحيح\" });\n    }\n\n    // Create simple session token (in production use JWT)\n    const token = `${user.id}-${Date.now()}`;\n\n    const response = {\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        avatar: user.avatar,\n        role: user.role,\n        isActive: user.isActive,\n        createdAt: user.createdAt.toISOString(),\n        updatedAt: user.updatedAt.toISOString(),\n      } as User,\n      token,\n      affiliate: user.affiliate\n        ? {\n            id: user.affiliate.id,\n            email: user.email,\n            name: user.name || \"\",\n            affiliateCode: user.affiliate.affiliateCode,\n            commissionRate: user.affiliate.commissionRate,\n            totalEarnings: user.affiliate.totalEarnings,\n            pendingEarnings: user.affiliate.pendingEarnings,\n            referralCount: user.affiliate.referralCount,\n            joinedAt: user.affiliate.createdAt.toISOString(),\n          }\n        : null,\n    };\n\n    res.json(response);\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    res.status(500).json({ error: \"خطأ في تسجيل الدخول\" });\n  }\n};\n\nexport const register: RequestHandler = async (req, res) => {\n  try {\n    const { email, name, password, wantAffiliate } = req.body;\n\n    if (!email || !password) {\n      return res\n        .status(400)\n        .json({ error: \"البريد الإلكتروني وكلمة المرور مطلوبان\" });\n    }\n\n    // Check if user already exists\n    const existingUser = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (existingUser) {\n      return res.status(400).json({ error: \"المستخدم موجود بالفعل\" });\n    }\n\n    // Create user\n    const user = await prisma.user.create({\n      data: {\n        email,\n        name,\n        role: \"USER\",\n        isActive: true,\n      },\n    });\n\n    // Create affiliate if requested\n    let affiliate = null;\n    if (wantAffiliate) {\n      affiliate = await prisma.affiliateUser.create({\n        data: {\n          userId: user.id,\n          affiliateCode: `REF${user.id.slice(-8).toUpperCase()}`,\n          commissionRate: 8,\n          totalEarnings: 0,\n          pendingEarnings: 0,\n          referralCount: 0,\n          status: \"ACTIVE\",\n        },\n      });\n    }\n\n    const token = `${user.id}-${Date.now()}`;\n\n    const response = {\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        avatar: user.avatar,\n        role: user.role,\n        isActive: user.isActive,\n        createdAt: user.createdAt.toISOString(),\n        updatedAt: user.updatedAt.toISOString(),\n      } as User,\n      token,\n      affiliate: affiliate\n        ? {\n            id: affiliate.id,\n            email: user.email,\n            name: user.name || \"\",\n            affiliateCode: affiliate.affiliateCode,\n            commissionRate: affiliate.commissionRate,\n            totalEarnings: affiliate.totalEarnings,\n            pendingEarnings: affiliate.pendingEarnings,\n            referralCount: affiliate.referralCount,\n            joinedAt: affiliate.createdAt.toISOString(),\n          }\n        : null,\n    };\n\n    res.status(201).json(response);\n  } catch (error) {\n    console.error(\"Registration error:\", error);\n    res.status(500).json({ error: \"خطأ في إنشاء الحساب\" });\n  }\n};\n\nexport const forgotPassword: RequestHandler = async (req, res) => {\n  try {\n    const { email } = req.body;\n\n    if (!email) {\n      return res.status(400).json({ error: \"البريد الإلكتروني مطلوب\" });\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (!user) {\n      // Don't reveal if email exists or not\n      return res.json({\n        message:\n          \"إذا كان البريد الإلكتروني موجود، ستصلك رسالة إعادة تعيين كلمة المرور\",\n      });\n    }\n\n    // In production, send actual email with reset token\n    // For demo, just return success\n    res.json({ message: \"تم إرسال رسالة إعادة تعيين كلمة المرور\" });\n  } catch (error) {\n    console.error(\"Forgot password error:\", error);\n    res.status(500).json({ error: \"خطأ في إرسال رسالة إعادة التعيين\" });\n  }\n};\n\nexport const getCurrentUser: RequestHandler = async (req, res) => {\n  try {\n    // In production, verify JWT token from Authorization header\n    const authHeader = req.headers.authorization;\n    if (!authHeader) {\n      return res.status(401).json({ error: \"غير مصرح\" });\n    }\n\n    const token = authHeader.replace(\"Bearer \", \"\");\n    const userId = token.split(\"-\")[0];\n\n    if (!userId) {\n      return res.status(401).json({ error: \"رمز غير صالح\" });\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { id: userId },\n      include: { affiliate: true },\n    });\n\n    if (!user || !user.isActive) {\n      return res.status(401).json({ error: \"مستخدم غير صالح\" });\n    }\n\n    const response = {\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        avatar: user.avatar,\n        role: user.role,\n        isActive: user.isActive,\n        createdAt: user.createdAt.toISOString(),\n        updatedAt: user.updatedAt.toISOString(),\n      } as User,\n      affiliate: user.affiliate\n        ? {\n            id: user.affiliate.id,\n            email: user.email,\n            name: user.name || \"\",\n            affiliateCode: user.affiliate.affiliateCode,\n            commissionRate: user.affiliate.commissionRate,\n            totalEarnings: user.affiliate.totalEarnings,\n            pendingEarnings: user.affiliate.pendingEarnings,\n            referralCount: user.affiliate.referralCount,\n            joinedAt: user.affiliate.createdAt.toISOString(),\n          }\n        : null,\n    };\n\n    res.json(response);\n  } catch (error) {\n    console.error(\"Get current user error:\", error);\n    res.status(500).json({ error: \"خطأ في جلب بيانات المستخدم\" });\n  }\n};\n","import { RequestHandler } from \"express\";\r\nimport { prisma } from \"@shared/db\";\r\n\r\n// Get user orders\r\nexport const getUserOrders: RequestHandler = async (req, res) => {\r\n  try {\r\n    const userId = req.query.userId as string;\r\n\r\n    if (!userId) {\r\n      return res.status(400).json({ error: \"User ID is required\" });\r\n    }\r\n\r\n    const orders = await prisma.order.findMany({\r\n      where: {\r\n        userId: userId,\r\n      },\r\n      include: {\r\n        items: {\r\n          include: {\r\n            product: {\r\n              select: {\r\n                id: true,\r\n                name: true,\r\n                images: true,\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      orderBy: {\r\n        createdAt: \"desc\",\r\n      },\r\n    });\r\n\r\n    // Format orders to match frontend expectations\r\n    const formattedOrders = orders.map((order) => {\r\n      const items = order.items.map((item) => ({\r\n        id: item.id,\r\n        productId: item.productId,\r\n        name: item.product.name,\r\n        price: item.price,\r\n        quantity: item.quantity,\r\n        image: item.product.images && item.product.images.length > 0\r\n          ? (item.product.images as any)[0]?.url || \"\"\r\n          : \"\",\r\n      }));\r\n\r\n      return {\r\n        id: order.id,\r\n        orderNumber: order.orderNumber,\r\n        date: order.createdAt.toISOString().split('T')[0],\r\n        status: order.status,\r\n        total: order.total,\r\n        itemsCount: order.items.length,\r\n        items: items,\r\n        shippingAddress: order.shippingAddress as {\r\n          city: string;\r\n          address: string;\r\n          phone: string;\r\n        },\r\n      };\r\n    });\r\n\r\n    res.json(formattedOrders);\r\n  } catch (error) {\r\n    console.error(\"Error fetching user orders:\", error);\r\n    res.status(500).json({ error: \"Failed to fetch orders\" });\r\n  }\r\n};\r\n\r\n// Get single order details\r\nexport const getOrderById: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const userId = req.query.userId as string;\r\n\r\n    if (!userId) {\r\n      return res.status(400).json({ error: \"User ID is required\" });\r\n    }\r\n\r\n    const order = await prisma.order.findFirst({\r\n      where: {\r\n        id: id,\r\n        userId: userId, // Ensure user can only access their own orders\r\n      },\r\n      include: {\r\n        items: {\r\n          include: {\r\n            product: {\r\n              select: {\r\n                id: true,\r\n                name: true,\r\n                images: true,\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!order) {\r\n      return res.status(404).json({ error: \"Order not found\" });\r\n    }\r\n\r\n    // Format order\r\n    const items = order.items.map((item) => ({\r\n      id: item.id,\r\n      productId: item.productId,\r\n      name: item.product.name,\r\n      price: item.price,\r\n      quantity: item.quantity,\r\n      total: item.total,\r\n      image: item.product.images && item.product.images.length > 0\r\n        ? (item.product.images as any)[0]?.url || \"\"\r\n        : \"\",\r\n    }));\r\n\r\n    const formattedOrder = {\r\n      id: order.id,\r\n      orderNumber: order.orderNumber,\r\n      date: order.createdAt.toISOString().split('T')[0],\r\n      status: order.status,\r\n      total: order.total,\r\n      subtotal: order.subtotal,\r\n      tax: order.tax,\r\n      shipping: order.shipping,\r\n      discount: order.discount,\r\n      paymentMethod: order.paymentMethod,\r\n      paymentStatus: order.paymentStatus,\r\n      itemsCount: order.items.length,\r\n      items: items,\r\n      shippingAddress: order.shippingAddress as {\r\n        name?: string;\r\n        city: string;\r\n        address: string;\r\n        phone: string;\r\n      },\r\n      billingAddress: order.billingAddress,\r\n      createdAt: order.createdAt.toISOString(),\r\n      updatedAt: order.updatedAt.toISOString(),\r\n    };\r\n\r\n    res.json(formattedOrder);\r\n  } catch (error) {\r\n    console.error(\"Error fetching order details:\", error);\r\n    res.status(500).json({ error: \"Failed to fetch order details\" });\r\n  }\r\n};\r\n","import { RequestHandler } from \"express\";\r\nimport { prisma } from \"@shared/db\";\r\n\r\n// Get product reviews\r\nexport const getProductReviews: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { productId } = req.params;\r\n\r\n    if (!productId) {\r\n      return res.status(400).json({ error: \"Product ID is required\" });\r\n    }\r\n\r\n    const reviews = await prisma.review.findMany({\r\n      where: {\r\n        productId: productId,\r\n      },\r\n      include: {\r\n        user: {\r\n          select: {\r\n            name: true,\r\n            email: true,\r\n          },\r\n        },\r\n      },\r\n      orderBy: {\r\n        createdAt: \"desc\",\r\n      },\r\n    });\r\n\r\n    // Calculate rating stats\r\n    const totalReviews = reviews.length;\r\n    const averageRating = totalReviews > 0\r\n      ? reviews.reduce((sum, r) => sum + r.rating, 0) / totalReviews\r\n      : 0;\r\n\r\n    const ratingDistribution = [5, 4, 3, 2, 1].map((stars) => {\r\n      const count = reviews.filter((r) => r.rating === stars).length;\r\n      return {\r\n        stars,\r\n        count,\r\n        percentage: totalReviews > 0 ? Math.round((count / totalReviews) * 100) : 0,\r\n      };\r\n    });\r\n\r\n    const formattedReviews = reviews.map((review) => ({\r\n      id: review.id,\r\n      rating: review.rating,\r\n      comment: review.comment,\r\n      userName: review.user.name,\r\n      userEmail: review.user.email,\r\n      date: review.createdAt.toISOString().split('T')[0],\r\n      createdAt: review.createdAt.toISOString(),\r\n    }));\r\n\r\n    res.json({\r\n      reviews: formattedReviews,\r\n      stats: {\r\n        totalReviews,\r\n        averageRating: Math.round(averageRating * 10) / 10,\r\n        ratingDistribution,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching product reviews:\", error);\r\n    res.status(500).json({ error: \"Failed to fetch reviews\" });\r\n  }\r\n};\r\n\r\n// Create review\r\nexport const createReview: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { productId, userId, rating, comment } = req.body;\r\n\r\n    if (!productId || !userId || !rating) {\r\n      return res.status(400).json({ error: \"Missing required fields\" });\r\n    }\r\n\r\n    if (rating < 1 || rating > 5) {\r\n      return res.status(400).json({ error: \"Rating must be between 1 and 5\" });\r\n    }\r\n\r\n    // Check if product exists\r\n    const product = await prisma.product.findUnique({\r\n      where: { id: productId },\r\n    });\r\n\r\n    if (!product) {\r\n      return res.status(404).json({ error: \"Product not found\" });\r\n    }\r\n\r\n    // Check if user already reviewed this product\r\n    const existingReview = await prisma.review.findUnique({\r\n      where: {\r\n        userId_productId: {\r\n          userId,\r\n          productId,\r\n        },\r\n      },\r\n    });\r\n\r\n    if (existingReview) {\r\n      return res.status(400).json({ error: \"You have already reviewed this product\" });\r\n    }\r\n\r\n    // Create review\r\n    const review = await prisma.review.create({\r\n      data: {\r\n        userId,\r\n        productId,\r\n        rating,\r\n        comment,\r\n      },\r\n      include: {\r\n        user: {\r\n          select: {\r\n            name: true,\r\n            email: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    res.status(201).json({\r\n      id: review.id,\r\n      rating: review.rating,\r\n      comment: review.comment,\r\n      userName: review.user.name,\r\n      userEmail: review.user.email,\r\n      date: review.createdAt.toISOString().split('T')[0],\r\n      createdAt: review.createdAt.toISOString(),\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error creating review:\", error);\r\n    res.status(500).json({ error: \"Failed to create review\" });\r\n  }\r\n};\r\n\r\n// Update review\r\nexport const updateReview: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { userId, rating, comment } = req.body;\r\n\r\n    if (!userId) {\r\n      return res.status(400).json({ error: \"User ID is required\" });\r\n    }\r\n\r\n    // Check if review exists and belongs to user\r\n    const existingReview = await prisma.review.findUnique({\r\n      where: { id },\r\n    });\r\n\r\n    if (!existingReview) {\r\n      return res.status(404).json({ error: \"Review not found\" });\r\n    }\r\n\r\n    if (existingReview.userId !== userId) {\r\n      return res.status(403).json({ error: \"You can only update your own reviews\" });\r\n    }\r\n\r\n    if (rating && (rating < 1 || rating > 5)) {\r\n      return res.status(400).json({ error: \"Rating must be between 1 and 5\" });\r\n    }\r\n\r\n    // Update review\r\n    const review = await prisma.review.update({\r\n      where: { id },\r\n      data: {\r\n        ...(rating && { rating }),\r\n        ...(comment !== undefined && { comment }),\r\n      },\r\n      include: {\r\n        user: {\r\n          select: {\r\n            name: true,\r\n            email: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    res.json({\r\n      id: review.id,\r\n      rating: review.rating,\r\n      comment: review.comment,\r\n      userName: review.user.name,\r\n      userEmail: review.user.email,\r\n      date: review.createdAt.toISOString().split('T')[0],\r\n      updatedAt: review.updatedAt.toISOString(),\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error updating review:\", error);\r\n    res.status(500).json({ error: \"Failed to update review\" });\r\n  }\r\n};\r\n\r\n// Delete review\r\nexport const deleteReview: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const userId = req.query.userId as string;\r\n\r\n    if (!userId) {\r\n      return res.status(400).json({ error: \"User ID is required\" });\r\n    }\r\n\r\n    // Check if review exists and belongs to user\r\n    const existingReview = await prisma.review.findUnique({\r\n      where: { id },\r\n    });\r\n\r\n    if (!existingReview) {\r\n      return res.status(404).json({ error: \"Review not found\" });\r\n    }\r\n\r\n    if (existingReview.userId !== userId) {\r\n      return res.status(403).json({ error: \"You can only delete your own reviews\" });\r\n    }\r\n\r\n    // Delete review\r\n    await prisma.review.delete({\r\n      where: { id },\r\n    });\r\n\r\n    res.json({ message: \"Review deleted successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error deleting review:\", error);\r\n    res.status(500).json({ error: \"Failed to delete review\" });\r\n  }\r\n};\r\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport {\n  getProducts,\n  getProductById,\n  getProductsByCategory,\n} from \"./routes/products\";\nimport {\n  getCategories,\n  getCategoryBySlug,\n  updateCategoryProductCount,\n} from \"./routes/categories\";\nimport {\n  getAdminStats,\n  createProduct,\n  updateProduct,\n  deleteProduct,\n  createCategory,\n  updateCategory,\n  deleteCategory,\n  getUsers,\n  updateUserRole,\n  getOrders,\n  updateOrderStatus,\n  getCommissions,\n  updateCommissionStatus,\n} from \"./routes/admin\";\nimport { login, register, forgotPassword, getCurrentUser } from \"./routes/auth\";\nimport { getUserOrders, getOrderById } from \"./routes/orders\";\nimport {\n  getProductReviews,\n  createReview,\n  updateReview,\n  deleteReview,\n} from \"./routes/reviews\";\n// Wishlist imports commented out for static deployment\n// import {\n//   getUserWishlist,\n//   addToWishlist,\n//   removeFromWishlist,\n//   isInWishlist,\n// } from \"./routes/wishlist\";\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // Products API\n  app.get(\"/api/products\", getProducts);\n  app.get(\"/api/products/:id\", getProductById);\n  app.get(\"/api/categories/:slug/products\", getProductsByCategory);\n\n  // Categories API\n  app.get(\"/api/categories\", getCategories);\n  app.get(\"/api/categories/:slug\", getCategoryBySlug);\n  app.post(\"/api/categories/update-counts\", updateCategoryProductCount);\n\n  // Auth API\n  app.post(\"/api/auth/login\", login);\n  app.post(\"/api/auth/register\", register);\n  app.post(\"/api/auth/forgot-password\", forgotPassword);\n  app.get(\"/api/auth/me\", getCurrentUser);\n\n  // Admin API\n  app.get(\"/api/admin/stats\", getAdminStats);\n\n  // Admin Products\n  app.post(\"/api/admin/products\", createProduct);\n  app.put(\"/api/admin/products/:id\", updateProduct);\n  app.delete(\"/api/admin/products/:id\", deleteProduct);\n\n  // Admin Categories\n  app.post(\"/api/admin/categories\", createCategory);\n  app.put(\"/api/admin/categories/:id\", updateCategory);\n  app.delete(\"/api/admin/categories/:id\", deleteCategory);\n\n  // Admin Users\n  app.get(\"/api/admin/users\", getUsers);\n  app.put(\"/api/admin/users/:id\", updateUserRole);\n\n  // Admin Orders\n  app.get(\"/api/admin/orders\", getOrders);\n  app.put(\"/api/admin/orders/:id\", updateOrderStatus);\n\n  // Admin Commissions\n  app.get(\"/api/admin/commissions\", getCommissions);\n  app.put(\"/api/admin/commissions/:id\", updateCommissionStatus);\n\n  // User Orders API\n  app.get(\"/api/orders\", getUserOrders);\n  app.get(\"/api/orders/:id\", getOrderById);\n\n  // Reviews API\n  app.get(\"/api/products/:productId/reviews\", getProductReviews);\n  app.post(\"/api/reviews\", createReview);\n  app.put(\"/api/reviews/:id\", updateReview);\n  app.delete(\"/api/reviews/:id\", deleteReview);\n\n  // Wishlist API - Commented out for static deployment\n  // Use client-side Appwrite SDK instead\n  // app.get(\"/api/wishlist\", getUserWishlist);\n  // app.post(\"/api/wishlist\", addToWishlist);\n  // app.delete(\"/api/wishlist/:id\", removeFromWishlist);\n  // app.get(\"/api/wishlist/check\", isInWishlist);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["app","express"],"mappings":"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"}