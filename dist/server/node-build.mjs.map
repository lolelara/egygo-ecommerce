{"version":3,"file":"node-build.mjs","sources":["../../server/lib/logger.ts","../../server/lib/rateLimiter.ts","../../server/routes/demo.ts","../../server/routes/chat.ts","../../shared/db.ts","../../server/routes/products.ts","../../server/routes/categories.ts","../../server/routes/admin.ts","../../server/routes/vendoor-scraper.ts","../../server/routes/auth.ts","../../server/routes/orders.ts","../../server/routes/reviews.ts","../../server/routes/vendoor.ts","../../server/routes/rbac.ts","../../server/routes/contracts.ts","../../server/routes/experiments.ts","../../server/routes/customer-experience.ts","../../server/lib/appwrite.ts","../../server/routes/supply-chain.ts","../../server/routes/notifications.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import winston from 'winston';\r\nimport DailyRotateFile from 'winston-daily-rotate-file';\r\nimport path from 'path';\r\n\r\n// Create logs directory if it doesn't exist\r\nconst logsDir = path.join(process.cwd(), 'logs');\r\n\r\n// Custom format for console output\r\nconst consoleFormat = winston.format.combine(\r\n  winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\r\n  winston.format.colorize(),\r\n  winston.format.printf(({ timestamp, level, message, ...meta }) => {\r\n    let log = `${timestamp} [${level}]: ${message}`;\r\n    if (Object.keys(meta).length > 0) {\r\n      log += ` ${JSON.stringify(meta)}`;\r\n    }\r\n    return log;\r\n  })\r\n);\r\n\r\n// Custom format for file output\r\nconst fileFormat = winston.format.combine(\r\n  winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\r\n  winston.format.errors({ stack: true }),\r\n  winston.format.json()\r\n);\r\n\r\n// Create the logger\r\nconst logger = winston.createLogger({\r\n  level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',\r\n  format: fileFormat,\r\n  defaultMeta: { service: 'egygo-api' },\r\n  transports: [\r\n    // Error log file\r\n    new DailyRotateFile({\r\n      filename: path.join(logsDir, 'error-%DATE%.log'),\r\n      datePattern: 'YYYY-MM-DD',\r\n      level: 'error',\r\n      maxSize: '20m',\r\n      maxFiles: '14d',\r\n      zippedArchive: true,\r\n    }),\r\n    \r\n    // Combined log file\r\n    new DailyRotateFile({\r\n      filename: path.join(logsDir, 'combined-%DATE%.log'),\r\n      datePattern: 'YYYY-MM-DD',\r\n      maxSize: '20m',\r\n      maxFiles: '14d',\r\n      zippedArchive: true,\r\n    }),\r\n    \r\n    // Audit log file (for security events)\r\n    new DailyRotateFile({\r\n      filename: path.join(logsDir, 'audit-%DATE%.log'),\r\n      datePattern: 'YYYY-MM-DD',\r\n      level: 'warn',\r\n      maxSize: '20m',\r\n      maxFiles: '30d',\r\n      zippedArchive: true,\r\n    }),\r\n  ],\r\n});\r\n\r\n// Add console transport for development\r\nif (process.env.NODE_ENV !== 'production') {\r\n  logger.add(new winston.transports.Console({\r\n    format: consoleFormat,\r\n  }));\r\n}\r\n\r\n// Custom logging methods\r\nexport const loggers = {\r\n  // General logging\r\n  info: (message: string, meta?: any) => logger.info(message, meta),\r\n  warn: (message: string, meta?: any) => logger.warn(message, meta),\r\n  error: (message: string, error?: Error | any, meta?: any) => {\r\n    if (error instanceof Error) {\r\n      logger.error(message, { error: error.message, stack: error.stack, ...meta });\r\n    } else {\r\n      logger.error(message, { error, ...meta });\r\n    }\r\n  },\r\n  debug: (message: string, meta?: any) => logger.debug(message, meta),\r\n\r\n  // Security logging\r\n  security: (event: string, details: any) => {\r\n    logger.warn(`SECURITY: ${event}`, {\r\n      type: 'security',\r\n      timestamp: new Date().toISOString(),\r\n      ...details,\r\n    });\r\n  },\r\n\r\n  // API logging\r\n  api: (method: string, url: string, statusCode: number, responseTime: number, userAgent?: string) => {\r\n    logger.info('API Request', {\r\n      type: 'api',\r\n      method,\r\n      url,\r\n      statusCode,\r\n      responseTime: `${responseTime}ms`,\r\n      userAgent,\r\n    });\r\n  },\r\n\r\n  // Database logging\r\n  database: (operation: string, collection: string, duration: number, success: boolean) => {\r\n    logger.info('Database Operation', {\r\n      type: 'database',\r\n      operation,\r\n      collection,\r\n      duration: `${duration}ms`,\r\n      success,\r\n    });\r\n  },\r\n\r\n  // Business logic logging\r\n  business: (event: string, details: any) => {\r\n    logger.info(`BUSINESS: ${event}`, {\r\n      type: 'business',\r\n      timestamp: new Date().toISOString(),\r\n      ...details,\r\n    });\r\n  },\r\n};\r\n\r\n// Error tracking middleware\r\nexport const errorTracker = (error: Error, context?: any) => {\r\n  loggers.error('Unhandled Error', error, context);\r\n  \r\n  // In production, you might want to send this to an external service\r\n  // like Sentry, LogRocket, or DataDog\r\n  if (process.env.NODE_ENV === 'production') {\r\n    // TODO: Integrate with external error tracking service\r\n    console.error('Production error tracking not implemented yet');\r\n  }\r\n};\r\n\r\n// Request logging middleware\r\nexport const requestLogger = (req: any, res: any, next: any) => {\r\n  const start = Date.now();\r\n  \r\n  res.on('finish', () => {\r\n    const duration = Date.now() - start;\r\n    loggers.api(\r\n      req.method,\r\n      req.originalUrl,\r\n      res.statusCode,\r\n      duration,\r\n      req.get('User-Agent')\r\n    );\r\n  });\r\n  \r\n  next();\r\n};\r\n\r\nexport default logger;\r\n","import { Request, Response, NextFunction } from 'express';\r\nimport { loggers } from './logger';\r\n\r\n// In-memory store for rate limiting (in production, use Redis)\r\ninterface RateLimitEntry {\r\n  count: number;\r\n  resetTime: number;\r\n  blocked: boolean;\r\n  blockUntil?: number;\r\n}\r\n\r\nconst rateLimitStore = new Map<string, RateLimitEntry>();\r\n\r\n// Rate limiting configuration\r\nconst RATE_LIMIT_CONFIG = {\r\n  // Login attempts\r\n  login: {\r\n    windowMs: 15 * 60 * 1000, // 15 minutes\r\n    maxAttempts: 5,\r\n    blockDurationMs: 30 * 60 * 1000, // 30 minutes block\r\n  },\r\n  // General API requests\r\n  api: {\r\n    windowMs: 15 * 60 * 1000, // 15 minutes\r\n    maxAttempts: 100,\r\n    blockDurationMs: 60 * 60 * 1000, // 1 hour block\r\n  },\r\n  // Password reset requests\r\n  passwordReset: {\r\n    windowMs: 60 * 60 * 1000, // 1 hour\r\n    maxAttempts: 3,\r\n    blockDurationMs: 24 * 60 * 60 * 1000, // 24 hours block\r\n  },\r\n  // Registration attempts\r\n  registration: {\r\n    windowMs: 60 * 60 * 1000, // 1 hour\r\n    maxAttempts: 3,\r\n    blockDurationMs: 24 * 60 * 60 * 1000, // 24 hours block\r\n  }\r\n};\r\n\r\n// Generate a key for rate limiting based on IP and optional identifier\r\nfunction generateKey(ip: string, identifier?: string): string {\r\n  return identifier ? `${ip}:${identifier}` : ip;\r\n}\r\n\r\n// Clean up expired entries\r\nfunction cleanupExpiredEntries(): void {\r\n  const now = Date.now();\r\n  for (const [key, entry] of rateLimitStore.entries()) {\r\n    if (entry.resetTime < now && (!entry.blockUntil || entry.blockUntil < now)) {\r\n      rateLimitStore.delete(key);\r\n    }\r\n  }\r\n}\r\n\r\n// Run cleanup every 5 minutes\r\nsetInterval(cleanupExpiredEntries, 5 * 60 * 1000);\r\n\r\n// Rate limiting middleware factory\r\nexport function createRateLimit(type: keyof typeof RATE_LIMIT_CONFIG) {\r\n  return (req: Request, res: Response, next: NextFunction) => {\r\n    const config = RATE_LIMIT_CONFIG[type];\r\n    const ip = req.ip || req.connection.remoteAddress || 'unknown';\r\n    const identifier = req.body?.email || req.body?.username; // For login/registration\r\n    const key = generateKey(ip, identifier);\r\n    \r\n    const now = Date.now();\r\n    const entry = rateLimitStore.get(key);\r\n\r\n    // Check if currently blocked\r\n    if (entry?.blocked && entry.blockUntil && entry.blockUntil > now) {\r\n      const remainingTime = Math.ceil((entry.blockUntil - now) / 1000 / 60);\r\n      \r\n      loggers.security('Rate limit block active', {\r\n        ip,\r\n        identifier,\r\n        type,\r\n        remainingMinutes: remainingTime,\r\n        userAgent: req.get('User-Agent')\r\n      });\r\n\r\n      return res.status(429).json({\r\n        error: 'Too many requests',\r\n        message: `تم حظر هذا العنوان مؤقتاً. حاول مرة أخرى بعد ${remainingTime} دقيقة.`,\r\n        retryAfter: remainingTime * 60\r\n      });\r\n    }\r\n\r\n    // Initialize or reset entry\r\n    if (!entry || entry.resetTime < now) {\r\n      rateLimitStore.set(key, {\r\n        count: 1,\r\n        resetTime: now + config.windowMs,\r\n        blocked: false\r\n      });\r\n      \r\n      loggers.security('Rate limit entry created', {\r\n        ip,\r\n        identifier,\r\n        type,\r\n        windowMs: config.windowMs\r\n      });\r\n      \r\n      return next();\r\n    }\r\n\r\n    // Increment counter\r\n    entry.count++;\r\n\r\n    // Check if limit exceeded\r\n    if (entry.count > config.maxAttempts) {\r\n      entry.blocked = true;\r\n      entry.blockUntil = now + config.blockDurationMs;\r\n\r\n      loggers.security('Rate limit exceeded - blocking', {\r\n        ip,\r\n        identifier,\r\n        type,\r\n        attempts: entry.count,\r\n        maxAttempts: config.maxAttempts,\r\n        blockDurationMs: config.blockDurationMs,\r\n        userAgent: req.get('User-Agent')\r\n      });\r\n\r\n      return res.status(429).json({\r\n        error: 'Too many requests',\r\n        message: `تم تجاوز الحد المسموح من المحاولات. تم حظر هذا العنوان لمدة ${Math.ceil(config.blockDurationMs / 1000 / 60)} دقيقة.`,\r\n        retryAfter: config.blockDurationMs / 1000\r\n      });\r\n    }\r\n\r\n    // Log warning when approaching limit\r\n    if (entry.count >= config.maxAttempts * 0.8) {\r\n      loggers.security('Rate limit warning - approaching limit', {\r\n        ip,\r\n        identifier,\r\n        type,\r\n        attempts: entry.count,\r\n        maxAttempts: config.maxAttempts,\r\n        userAgent: req.get('User-Agent')\r\n      });\r\n    }\r\n\r\n    // Add rate limit headers\r\n    res.set({\r\n      'X-RateLimit-Limit': config.maxAttempts.toString(),\r\n      'X-RateLimit-Remaining': Math.max(0, config.maxAttempts - entry.count).toString(),\r\n      'X-RateLimit-Reset': new Date(entry.resetTime).toISOString()\r\n    });\r\n\r\n    next();\r\n  };\r\n}\r\n\r\n// Specific rate limiters\r\nexport const loginRateLimit = createRateLimit('login');\r\nexport const apiRateLimit = createRateLimit('api');\r\nexport const passwordResetRateLimit = createRateLimit('passwordReset');\r\nexport const registrationRateLimit = createRateLimit('registration');\r\n\r\n// Advanced brute force protection with progressive delays\r\nexport function progressiveBruteForceProtection(req: Request, res: Response, next: NextFunction) {\r\n  const ip = req.ip || req.connection.remoteAddress || 'unknown';\r\n  const identifier = req.body?.email || req.body?.username;\r\n  const key = generateKey(ip, identifier);\r\n  \r\n  const now = Date.now();\r\n  const entry = rateLimitStore.get(key);\r\n\r\n  if (!entry) {\r\n    return next();\r\n  }\r\n\r\n  // Progressive delay based on failed attempts\r\n  const delayMs = Math.min(entry.count * 1000, 30000); // Max 30 seconds delay\r\n  \r\n  if (delayMs > 0) {\r\n    loggers.security('Progressive delay applied', {\r\n      ip,\r\n      identifier,\r\n      attempts: entry.count,\r\n      delayMs,\r\n      userAgent: req.get('User-Agent')\r\n    });\r\n\r\n    setTimeout(() => {\r\n      next();\r\n    }, delayMs);\r\n  } else {\r\n    next();\r\n  }\r\n}\r\n\r\n// IP reputation tracking\r\nconst suspiciousIPs = new Map<string, {\r\n  violations: number;\r\n  lastViolation: number;\r\n  permanentlyBlocked: boolean;\r\n}>();\r\n\r\nexport function ipReputationCheck(req: Request, res: Response, next: NextFunction) {\r\n  const ip = req.ip || req.connection.remoteAddress || 'unknown';\r\n  const reputation = suspiciousIPs.get(ip);\r\n\r\n  // Check if IP is permanently blocked\r\n  if (reputation?.permanentlyBlocked) {\r\n    loggers.security('Blocked IP attempted access', {\r\n      ip,\r\n      userAgent: req.get('User-Agent'),\r\n      violations: reputation.violations\r\n    });\r\n\r\n    return res.status(403).json({\r\n      error: 'Access denied',\r\n      message: 'تم حظر هذا العنوان نهائياً بسبب انتهاكات متعددة.'\r\n    });\r\n  }\r\n\r\n  // Check if IP has too many violations\r\n  if (reputation && reputation.violations >= 10) {\r\n    reputation.permanentlyBlocked = true;\r\n    \r\n    loggers.security('IP permanently blocked', {\r\n      ip,\r\n      violations: reputation.violations,\r\n      userAgent: req.get('User-Agent')\r\n    });\r\n\r\n    return res.status(403).json({\r\n      error: 'Access denied',\r\n      message: 'تم حظر هذا العنوان نهائياً بسبب انتهاكات متعددة.'\r\n    });\r\n  }\r\n\r\n  next();\r\n}\r\n\r\n// Track violations\r\nexport function trackViolation(ip: string, violationType: string, details?: any) {\r\n  const reputation = suspiciousIPs.get(ip) || {\r\n    violations: 0,\r\n    lastViolation: 0,\r\n    permanentlyBlocked: false\r\n  };\r\n\r\n  reputation.violations++;\r\n  reputation.lastViolation = Date.now();\r\n\r\n  suspiciousIPs.set(ip, reputation);\r\n\r\n  loggers.security('Security violation tracked', {\r\n    ip,\r\n    violationType,\r\n    violations: reputation.violations,\r\n    details\r\n  });\r\n}\r\n\r\n// Clean up old reputation data\r\nsetInterval(() => {\r\n  const now = Date.now();\r\n  const maxAge = 30 * 24 * 60 * 60 * 1000; // 30 days\r\n\r\n  for (const [ip, reputation] of suspiciousIPs.entries()) {\r\n    if (now - reputation.lastViolation > maxAge && !reputation.permanentlyBlocked) {\r\n      suspiciousIPs.delete(ip);\r\n    }\r\n  }\r\n}, 24 * 60 * 60 * 1000); // Run daily\r\n\r\n// Export rate limit store for monitoring\r\nexport { rateLimitStore, suspiciousIPs };\r\n","import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { RequestHandler } from \"express\";\r\nimport OpenAI from \"openai\";\r\n\r\n// Initialize OpenAI with server-side key\r\nconst openai = new OpenAI({\r\n  apiKey: process.env.OPENAI_API_KEY || process.env.VITE_OPENAI_API_KEY,\r\n});\r\n\r\ninterface ChatRequest {\r\n  messages: Array<{\r\n    role: 'system' | 'user' | 'assistant';\r\n    content: string;\r\n  }>;\r\n}\r\n\r\nexport const handleChatCompletion: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { messages } = req.body as ChatRequest;\r\n\r\n    if (!messages || !Array.isArray(messages)) {\r\n      return res.status(400).json({\r\n        error: 'Invalid request: messages array is required'\r\n      });\r\n    }\r\n\r\n    // Call OpenAI API server-side (secure)\r\n    const completion = await openai.chat.completions.create({\r\n      model: 'gpt-4o-mini',\r\n      messages: messages,\r\n      temperature: 0.7,\r\n      max_tokens: 500,\r\n    });\r\n\r\n    const response = {\r\n      message: completion.choices[0]?.message?.content || 'عذراً، ما قدرتش أفهم. جرب تاني 🙏',\r\n      usage: completion.usage,\r\n    };\r\n\r\n    res.json(response);\r\n  } catch (error: any) {\r\n    console.error('OpenAI API Error:', error);\r\n    \r\n    res.status(500).json({\r\n      error: 'حصل خطأ في الاتصال بالخدمة. جرب تاني بعد شوية 🙏',\r\n      details: error.message\r\n    });\r\n  }\r\n};\r\n","import { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: [\"query\"],\n  });\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n","import { RequestHandler } from \"express\";\nimport { prisma } from \"@shared/db\";\nimport {\n  ProductListResponse,\n  ProductFilters,\n  PaginationParams,\n} from \"@shared/prisma-types\";\n\nexport const getProducts: RequestHandler = async (req, res) => {\n  try {\n    const {\n      categoryId,\n      minPrice,\n      maxPrice,\n      inStock,\n      searchQuery,\n      sortBy = \"featured\",\n      page = 1,\n      limit = 12,\n    } = req.query as Partial<\n      ProductFilters & PaginationParams & { page: string; limit: string }\n    >;\n\n    const skip = (Number(page) - 1) * Number(limit);\n    const take = Number(limit);\n\n    // Build where clause\n    const where: any = {};\n\n    if (categoryId) {\n      where.categoryId = categoryId;\n    }\n\n    if (minPrice || maxPrice) {\n      where.price = {};\n      if (minPrice) where.price.gte = Number(minPrice);\n      if (maxPrice) where.price.lte = Number(maxPrice);\n    }\n\n    if (inStock !== undefined) {\n      where.inStock = String(inStock) === \"true\";\n    }\n\n    if (searchQuery) {\n      where.OR = [\n        { name: { contains: searchQuery, mode: \"insensitive\" } },\n        { description: { contains: searchQuery, mode: \"insensitive\" } },\n        {\n          tags: {\n            some: { name: { contains: searchQuery, mode: \"insensitive\" } },\n          },\n        },\n      ];\n    }\n\n    // Build orderBy clause\n    let orderBy: any = {};\n    switch (sortBy) {\n      case \"price_asc\":\n        orderBy = { price: \"asc\" };\n        break;\n      case \"price_desc\":\n        orderBy = { price: \"desc\" };\n        break;\n      case \"rating\":\n        orderBy = { rating: \"desc\" };\n        break;\n      case \"newest\":\n        orderBy = { createdAt: \"desc\" };\n        break;\n      default:\n        // Featured: sort by rating * reviewCount\n        orderBy = [{ rating: \"desc\" }, { reviewCount: \"desc\" }];\n    }\n\n    const [products, total] = await Promise.all([\n      prisma.product.findMany({\n        where,\n        orderBy,\n        skip,\n        take,\n        include: {\n          category: true,\n          images: {\n            orderBy: { order: \"asc\" },\n          },\n          tags: true,\n          reviews: {\n            include: {\n              user: true,\n            },\n            orderBy: { createdAt: \"desc\" },\n            take: 5,\n          },\n          _count: {\n            select: { reviews: true },\n          },\n        },\n      }),\n      prisma.product.count({ where }),\n    ]);\n\n    const response: ProductListResponse = {\n      products,\n      total,\n      page: Number(page),\n      limit: Number(limit),\n    };\n\n    res.json(response);\n  } catch (error) {\n    console.error(\"Error fetching products:\", error);\n    res.status(500).json({ error: \"فشل في جلب المنتجات\" });\n  }\n};\n\nexport const getProductById: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const product = await prisma.product.findUnique({\n      where: { id },\n      include: {\n        category: true,\n        images: {\n          orderBy: { order: \"asc\" },\n        },\n        tags: true,\n        reviews: {\n          include: {\n            user: true,\n          },\n          orderBy: { createdAt: \"desc\" },\n        },\n        _count: {\n          select: { reviews: true },\n        },\n      },\n    });\n\n    if (!product) {\n      return res.status(404).json({ error: \"المنتج غير موجود\" });\n    }\n\n    res.json(product);\n  } catch (error) {\n    console.error(\"Error fetching product:\", error);\n    res.status(500).json({ error: \"فشل في جلب المنتج\" });\n  }\n};\n\nexport const getProductsByCategory: RequestHandler = async (req, res) => {\n  try {\n    const { slug } = req.params;\n    const {\n      minPrice,\n      maxPrice,\n      inStock,\n      searchQuery,\n      sortBy = \"featured\",\n      page = 1,\n      limit = 12,\n    } = req.query as Partial<\n      ProductFilters & PaginationParams & { page: string; limit: string }\n    >;\n\n    // Find category by slug\n    const category = await prisma.category.findUnique({\n      where: { slug },\n    });\n\n    if (!category) {\n      return res.status(404).json({ error: \"الفئة غير موجودة\" });\n    }\n\n    // Get products in this category\n    const skip = (Number(page) - 1) * Number(limit);\n    const take = Number(limit);\n\n    const where: any = { categoryId: category.id };\n\n    if (minPrice || maxPrice) {\n      where.price = {};\n      if (minPrice) where.price.gte = Number(minPrice);\n      if (maxPrice) where.price.lte = Number(maxPrice);\n    }\n\n    if (inStock !== undefined) {\n      where.inStock = String(inStock) === \"true\";\n    }\n\n    if (searchQuery) {\n      where.OR = [\n        { name: { contains: searchQuery, mode: \"insensitive\" } },\n        { description: { contains: searchQuery, mode: \"insensitive\" } },\n        {\n          tags: {\n            some: { name: { contains: searchQuery, mode: \"insensitive\" } },\n          },\n        },\n      ];\n    }\n\n    let orderBy: any = {};\n    switch (sortBy) {\n      case \"price_asc\":\n        orderBy = { price: \"asc\" };\n        break;\n      case \"price_desc\":\n        orderBy = { price: \"desc\" };\n        break;\n      case \"rating\":\n        orderBy = { rating: \"desc\" };\n        break;\n      case \"newest\":\n        orderBy = { createdAt: \"desc\" };\n        break;\n      default:\n        orderBy = [{ rating: \"desc\" }, { reviewCount: \"desc\" }];\n    }\n\n    const [products, total] = await Promise.all([\n      prisma.product.findMany({\n        where,\n        orderBy,\n        skip,\n        take,\n        include: {\n          category: true,\n          images: {\n            orderBy: { order: \"asc\" },\n          },\n          tags: true,\n          reviews: {\n            include: {\n              user: true,\n            },\n            orderBy: { createdAt: \"desc\" },\n            take: 5,\n          },\n          _count: {\n            select: { reviews: true },\n          },\n        },\n      }),\n      prisma.product.count({ where }),\n    ]);\n\n    const response: ProductListResponse = {\n      products,\n      total,\n      page: Number(page),\n      limit: Number(limit),\n    };\n\n    res.json(response);\n  } catch (error) {\n    console.error(\"Error fetching products by category:\", error);\n    res.status(500).json({ error: \"فشل في جلب منتجات الفئة\" });\n  }\n};\n","import { RequestHandler } from \"express\";\nimport { prisma } from \"@shared/db\";\nimport { CategoryListResponse } from \"@shared/prisma-types\";\n\nexport const getCategories: RequestHandler = async (req, res) => {\n  try {\n    const categories = await prisma.category.findMany({\n      orderBy: { name: \"asc\" },\n    });\n\n    const response: CategoryListResponse = {\n      categories,\n    };\n\n    res.json(response);\n  } catch (error) {\n    console.error(\"Error fetching categories:\", error);\n    res.status(500).json({ error: \"فشل في جلب الفئات\" });\n  }\n};\n\nexport const getCategoryBySlug: RequestHandler = async (req, res) => {\n  try {\n    const { slug } = req.params;\n\n    const category = await prisma.category.findUnique({\n      where: { slug },\n    });\n\n    if (!category) {\n      return res.status(404).json({ error: \"الفئة غير موجودة\" });\n    }\n\n    res.json(category);\n  } catch (error) {\n    console.error(\"Error fetching category:\", error);\n    res.status(500).json({ error: \"فشل في جلب الفئة\" });\n  }\n};\n\nexport const updateCategoryProductCount: RequestHandler = async (req, res) => {\n  try {\n    // Update product counts for all categories\n    const categories = await prisma.category.findMany();\n\n    for (const category of categories) {\n      const productCount = await prisma.product.count({\n        where: { categoryId: category.id },\n      });\n\n      await prisma.category.update({\n        where: { id: category.id },\n        data: { productCount },\n      });\n    }\n\n    res.json({ message: \"تم تحديث عدد المنتجات في الفئات بنجاح\" });\n  } catch (error) {\n    console.error(\"Error updating category product counts:\", error);\n    res.status(500).json({ error: \"فشل في تحديث عدد المنتجات\" });\n  }\n};\n","import { RequestHandler } from \"express\";\nimport { prisma } from \"@shared/db\";\nimport type {\n  AdminStats,\n  User,\n  Product,\n  Category,\n  Order,\n  Commission,\n} from \"@shared/api\";\n\n// Get admin dashboard stats\nexport const getAdminStats: RequestHandler = async (req, res) => {\n  try {\n    const [\n      totalUsers,\n      totalProducts,\n      totalOrders,\n      totalAffiliates,\n      pendingOrders,\n      pendingCommissions,\n      orders,\n      products,\n    ] = await Promise.all([\n      prisma.user.count(),\n      prisma.product.count(),\n      prisma.order.count(),\n      prisma.affiliateUser.count(),\n      prisma.order.count({ where: { status: \"PENDING\" } }),\n      prisma.commission.aggregate({\n        where: { status: \"PENDING\" },\n        _sum: { amount: true },\n      }),\n      prisma.order.findMany({\n        include: { items: { include: { product: true } } },\n        orderBy: { createdAt: \"desc\" },\n      }),\n      prisma.product.findMany({\n        include: {\n          orderItems: true,\n          category: true,\n        },\n        orderBy: { createdAt: \"desc\" },\n      }),\n    ]);\n\n    // Calculate revenue\n    const totalRevenue = orders.reduce((sum, order) => sum + order.total, 0);\n    const thisMonth = new Date();\n    thisMonth.setDate(1);\n\n    const thisMonthOrders = orders.filter(\n      (order) => new Date(order.createdAt) >= thisMonth,\n    );\n    const thisMonthRevenue = thisMonthOrders.reduce(\n      (sum, order) => sum + order.total,\n      0,\n    );\n\n    // Get top selling products\n    const productSales = products\n      .map((product) => {\n        const soldQuantity = product.orderItems.reduce(\n          (sum, item) => sum + item.quantity,\n          0,\n        );\n        const revenue = product.orderItems.reduce(\n          (sum, item) => sum + item.total,\n          0,\n        );\n        return {\n          product: {\n            id: product.id,\n            name: product.name,\n            description: product.description,\n            price: product.price,\n            originalPrice: product.originalPrice || undefined,\n            images: [], // Will be populated from images relation\n            category: product.categoryId,\n            tags: [], // Will be populated from tags relation\n            inStock: product.inStock,\n            rating: product.rating,\n            reviewCount: product.reviewCount,\n            affiliateCommission: product.affiliateCommission,\n          },\n          soldQuantity,\n          revenue,\n        };\n      })\n      .sort((a, b) => b.soldQuantity - a.soldQuantity)\n      .slice(0, 5);\n\n    // Get recent orders\n    const recentOrders = orders.slice(0, 5).map((order) => ({\n      id: order.id,\n      orderNumber: order.orderNumber,\n      status: order.status as Order[\"status\"],\n      total: order.total,\n      subtotal: order.subtotal,\n      tax: order.tax,\n      shipping: order.shipping,\n      discount: order.discount,\n      shippingAddress: order.shippingAddress,\n      billingAddress: order.billingAddress,\n      paymentMethod: order.paymentMethod,\n      paymentStatus: order.paymentStatus as Order[\"paymentStatus\"],\n      createdAt: order.createdAt.toISOString(),\n      updatedAt: order.updatedAt.toISOString(),\n      userId: order.userId,\n      items: order.items.map((item) => ({\n        id: item.id,\n        quantity: item.quantity,\n        price: item.price,\n        total: item.total,\n        productId: item.productId,\n        product: {\n          id: item.product.id,\n          name: item.product.name,\n          description: item.product.description,\n          price: item.product.price,\n          originalPrice: item.product.originalPrice || undefined,\n          images: [], // Populate from images relation\n          category: item.product.categoryId,\n          tags: [], // Populate from tags relation\n          inStock: item.product.inStock,\n          rating: item.product.rating,\n          reviewCount: item.product.reviewCount,\n          affiliateCommission: item.product.affiliateCommission,\n        },\n      })),\n    }));\n\n    const stats: AdminStats = {\n      totalUsers,\n      totalProducts,\n      totalOrders,\n      totalRevenue,\n      pendingOrders,\n      totalAffiliates,\n      pendingCommissions: pendingCommissions._sum.amount || 0,\n      thisMonthRevenue,\n      thisMonthOrders: thisMonthOrders.length,\n      topSellingProducts: productSales,\n      recentOrders,\n    };\n\n    res.json(stats);\n  } catch (error) {\n    console.error(\"Error fetching admin stats:\", error);\n    res.status(500).json({ error: \"فشل في جلب إحصائيات لوحة التحكم\" });\n  }\n};\n\n// Admin Products Management\nexport const createProduct: RequestHandler = async (req, res) => {\n  try {\n    const {\n      name,\n      description,\n      price,\n      originalPrice,\n      categoryId,\n      images,\n      tags,\n      stockQuantity,\n      affiliateCommission,\n    } = req.body;\n\n    const product = await prisma.product.create({\n      data: {\n        name,\n        description,\n        price,\n        originalPrice,\n        categoryId,\n        stockQuantity,\n        affiliateCommission,\n        inStock: stockQuantity > 0,\n        images: {\n          create: images.map((url: string, index: number) => ({\n            url,\n            order: index,\n          })),\n        },\n        tags: {\n          connectOrCreate: tags.map((tagName: string) => ({\n            where: { name: tagName },\n            create: { name: tagName },\n          })),\n        },\n      },\n      include: {\n        category: true,\n        images: true,\n        tags: true,\n      },\n    });\n\n    res.status(201).json(product);\n  } catch (error) {\n    console.error(\"Error creating product:\", error);\n    res.status(500).json({ error: \"فشل في إنشاء المنتج\" });\n  }\n};\n\nexport const updateProduct: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const {\n      name,\n      description,\n      price,\n      originalPrice,\n      categoryId,\n      images,\n      tags,\n      stockQuantity,\n      affiliateCommission,\n    } = req.body;\n\n    // Delete existing images and tags\n    await prisma.productImage.deleteMany({ where: { productId: id } });\n    await prisma.product.update({\n      where: { id },\n      data: { tags: { set: [] } },\n    });\n\n    const product = await prisma.product.update({\n      where: { id },\n      data: {\n        name,\n        description,\n        price,\n        originalPrice,\n        categoryId,\n        stockQuantity,\n        affiliateCommission,\n        inStock: stockQuantity > 0,\n        images: {\n          create: images.map((url: string, index: number) => ({\n            url,\n            order: index,\n          })),\n        },\n        tags: {\n          connectOrCreate: tags.map((tagName: string) => ({\n            where: { name: tagName },\n            create: { name: tagName },\n          })),\n        },\n      },\n      include: {\n        category: true,\n        images: true,\n        tags: true,\n      },\n    });\n\n    res.json(product);\n  } catch (error) {\n    console.error(\"Error updating product:\", error);\n    res.status(500).json({ error: \"فشل في تحديث المنتج\" });\n  }\n};\n\nexport const deleteProduct: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    await prisma.product.delete({\n      where: { id },\n    });\n\n    res.json({ message: \"تم حذف المنتج بنجاح\" });\n  } catch (error) {\n    console.error(\"Error deleting product:\", error);\n    res.status(500).json({ error: \"فشل في حذف المنتج\" });\n  }\n};\n\n// Admin Categories Management\nexport const createCategory: RequestHandler = async (req, res) => {\n  try {\n    const { name, slug, description, image } = req.body;\n\n    const category = await prisma.category.create({\n      data: {\n        name,\n        slug,\n        description,\n        image,\n      },\n    });\n\n    res.status(201).json(category);\n  } catch (error) {\n    console.error(\"Error creating category:\", error);\n    res.status(500).json({ error: \"فشل في إنشاء الفئة\" });\n  }\n};\n\nexport const updateCategory: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { name, slug, description, image } = req.body;\n\n    const category = await prisma.category.update({\n      where: { id },\n      data: {\n        name,\n        slug,\n        description,\n        image,\n      },\n    });\n\n    res.json(category);\n  } catch (error) {\n    console.error(\"Error updating category:\", error);\n    res.status(500).json({ error: \"فشل في تحديث الفئة\" });\n  }\n};\n\nexport const deleteCategory: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    await prisma.category.delete({\n      where: { id },\n    });\n\n    res.json({ message: \"تم حذف الفئة بنجاح\" });\n  } catch (error) {\n    console.error(\"Error deleting category:\", error);\n    res.status(500).json({ error: \"فشل في حذف الفئة\" });\n  }\n};\n\n// Admin Users Management\nexport const getUsers: RequestHandler = async (req, res) => {\n  try {\n    const users = await prisma.user.findMany({\n      orderBy: { createdAt: \"desc\" },\n      include: {\n        affiliate: true,\n      },\n    });\n\n    res.json(users);\n  } catch (error) {\n    console.error(\"Error fetching users:\", error);\n    res.status(500).json({ error: \"فشل في جلب المستخدمين\" });\n  }\n};\n\nexport const updateUserRole: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { role, isActive } = req.body;\n\n    const user = await prisma.user.update({\n      where: { id },\n      data: { role, isActive },\n    });\n\n    res.json(user);\n  } catch (error) {\n    console.error(\"Error updating user:\", error);\n    res.status(500).json({ error: \"فشل في تحديث المستخدم\" });\n  }\n};\n\n// Admin Orders Management\nexport const getOrders: RequestHandler = async (req, res) => {\n  try {\n    const orders = await prisma.order.findMany({\n      include: {\n        user: true,\n        items: {\n          include: {\n            product: true,\n          },\n        },\n      },\n      orderBy: { createdAt: \"desc\" },\n    });\n\n    res.json(orders);\n  } catch (error) {\n    console.error(\"Error fetching orders:\", error);\n    res.status(500).json({ error: \"فشل في جلب الطلبات\" });\n  }\n};\n\nexport const updateOrderStatus: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { status } = req.body;\n\n    const order = await prisma.order.update({\n      where: { id },\n      data: { status },\n      include: {\n        user: true,\n        items: {\n          include: {\n            product: true,\n          },\n        },\n      },\n    });\n\n    res.json(order);\n  } catch (error) {\n    console.error(\"Error updating order:\", error);\n    res.status(500).json({ error: \"فشل في تحديث الطلب\" });\n  }\n};\n\n// Admin Commissions Management\nexport const getCommissions: RequestHandler = async (req, res) => {\n  try {\n    const commissions = await prisma.commission.findMany({\n      include: {\n        affiliate: {\n          include: {\n            user: true,\n          },\n        },\n        order: true,\n      },\n      orderBy: { createdAt: \"desc\" },\n    });\n\n    res.json(commissions);\n  } catch (error) {\n    console.error(\"Error fetching commissions:\", error);\n    res.status(500).json({ error: \"فشل في جلب العمولات\" });\n  }\n};\n\nexport const updateCommissionStatus: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { status } = req.body;\n\n    const commission = await prisma.commission.update({\n      where: { id },\n      data: { status },\n      include: {\n        affiliate: {\n          include: {\n            user: true,\n          },\n        },\n        order: true,\n      },\n    });\n\n    res.json(commission);\n  } catch (error) {\n    console.error(\"Error updating commission:\", error);\n    res.status(500).json({ error: \"فشل في تحديث العمولة\" });\n  }\n};\n","import puppeteer from 'puppeteer';\r\nimport { Request, Response } from 'express';\r\n\r\nconst LOGIN_URL = 'https://vendoor.co/user/login?returnUrl=%2Faffiliate%2Fproducts';\r\nconst PRODUCTS_BASE_URL = 'https://vendoor.co/affiliate/products?page=';\r\n\r\n/**\r\n * تسجيل الدخول إلى Ven-door\r\n */\r\nasync function loginToVendoor(page: any, email: string, password: string) {\r\n  await page.goto(LOGIN_URL, { waitUntil: 'networkidle2' });\r\n  await page.type('input[name=\"Email\"]', email);\r\n  await page.type('input[name=\"Password\"]', password);\r\n  await Promise.all([\r\n    page.click('button[type=\"submit\"]'),\r\n    page.waitForNavigation({ waitUntil: 'networkidle2' })\r\n  ]);\r\n}\r\n\r\n/**\r\n * استخراج المنتجات من صفحة واحدة\r\n */\r\nasync function scrapeProductsPage(page: any, pageNum: number) {\r\n  const url = `${PRODUCTS_BASE_URL}${pageNum}`;\r\n  await page.goto(url, { waitUntil: 'networkidle2' });\r\n  await page.waitForSelector('table tbody tr', { timeout: 10000 });\r\n  \r\n  const products = await page.evaluate(() => {\r\n    const rows = document.querySelectorAll('table tbody tr');\r\n    const results: any[] = [];\r\n    \r\n    rows.forEach((row: any) => {\r\n      try {\r\n        const cells = row.querySelectorAll('td');\r\n        if (cells.length < 6) return;\r\n        \r\n        const imgElement = cells[0].querySelector('img');\r\n        const image = imgElement ? imgElement.src : '';\r\n        \r\n        const titleElement = cells[1].querySelector('a');\r\n        const title = titleElement ? titleElement.textContent.trim() : '';\r\n        \r\n        const priceText = cells[2].textContent.trim();\r\n        const price = priceText.replace(/[^\\d.]/g, '');\r\n        \r\n        const commissionText = cells[3].textContent.trim();\r\n        const commission = commissionText.replace(/[^\\d.]/g, '');\r\n        \r\n        const stock = cells[4].textContent.trim();\r\n        \r\n        const productLink = titleElement ? titleElement.href : '';\r\n        const productId = productLink.split('/').pop() || '';\r\n        \r\n        results.push({\r\n          id: productId,\r\n          title,\r\n          price,\r\n          commission,\r\n          stock,\r\n          image,\r\n          url: productLink\r\n        });\r\n      } catch (error) {\r\n        console.error('خطأ في معالجة صف:', error);\r\n      }\r\n    });\r\n    \r\n    return results;\r\n  });\r\n  \r\n  return products;\r\n}\r\n\r\n/**\r\n * API endpoint لجلب منتجات Ven-door\r\n */\r\nexport async function scrapeVendoorProducts(req: Request, res: Response) {\r\n  let browser;\r\n  \r\n  try {\r\n    const page = parseInt(req.query.page as string) || 1;\r\n    const email = process.env.VENDOOR_EMAIL || 'almlmibrahym574@gmail.com';\r\n    const password = process.env.VENDOOR_PASSWORD || 'hema2004';\r\n    \r\n    console.log(`🚀 بدء scraping الصفحة ${page}...`);\r\n    \r\n    browser = await puppeteer.launch({\r\n      headless: true,\r\n      args: [\r\n        '--no-sandbox',\r\n        '--disable-setuid-sandbox',\r\n        '--disable-dev-shm-usage'\r\n      ]\r\n    });\r\n    \r\n    const browserPage = await browser.newPage();\r\n    \r\n    console.log('🔐 تسجيل الدخول...');\r\n    await loginToVendoor(browserPage, email, password);\r\n    \r\n    console.log(`📄 جلب الصفحة ${page}...`);\r\n    const products = await scrapeProductsPage(browserPage, page);\r\n    \r\n    await browser.close();\r\n    \r\n    console.log(`✅ تم جلب ${products.length} منتج`);\r\n    \r\n    res.json({\r\n      success: true,\r\n      page,\r\n      totalProducts: products.length,\r\n      products\r\n    });\r\n    \r\n  } catch (error: any) {\r\n    if (browser) await browser.close();\r\n    console.error('❌ خطأ:', error);\r\n    \r\n    res.status(500).json({\r\n      success: false,\r\n      error: error.message\r\n    });\r\n  }\r\n}\r\n","import { RequestHandler } from \"express\";\nimport { prisma } from \"@shared/db\";\nimport { User } from \"@shared/api\";\nimport { loginRateLimit, registrationRateLimit, passwordResetRateLimit, trackViolation } from \"../lib/rateLimiter\";\nimport { loggers } from \"../lib/logger\";\n\n// Simple auth system - in production use proper JWT, bcrypt, etc.\nexport const login: RequestHandler = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      return res\n        .status(400)\n        .json({ error: \"البريد الإلكتروني وكلمة المرور مطلوبان\" });\n    }\n\n    // Find user by email\n    const user = await prisma.user.findUnique({\n      where: { email },\n      include: { affiliate: true },\n    });\n\n    if (!user) {\n      return res\n        .status(401)\n        .json({ error: \"البريد الإلكتروني أو كلمة المرور غير صحيح\" });\n    }\n\n    if (!user.isActive) {\n      return res.status(401).json({ error: \"الحساب معطل\" });\n    }\n\n    // For demo purposes, we'll accept simple passwords\n    // In production, use bcrypt to hash and compare passwords\n    const validPasswords: { [key: string]: string } = {\n      \"admin@example.com\": \"admin123\",\n      \"superadmin@example.com\": \"superadmin123\",\n      \"user@example.com\": \"user123\",\n    };\n\n    if (password !== validPasswords[email]) {\n      return res\n        .status(401)\n        .json({ error: \"البريد الإلكتروني أو كلمة المرور غير صحيح\" });\n    }\n\n    // Create simple session token (in production use JWT)\n    const token = `${user.id}-${Date.now()}`;\n\n    const response = {\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        avatar: user.avatar,\n        role: user.role,\n        isActive: user.isActive,\n        createdAt: user.createdAt.toISOString(),\n        updatedAt: user.updatedAt.toISOString(),\n      } as User,\n      token,\n      affiliate: user.affiliate\n        ? {\n            id: user.affiliate.id,\n            email: user.email,\n            name: user.name || \"\",\n            affiliateCode: user.affiliate.affiliateCode,\n            commissionRate: user.affiliate.commissionRate,\n            totalEarnings: user.affiliate.totalEarnings,\n            pendingEarnings: user.affiliate.pendingEarnings,\n            referralCount: user.affiliate.referralCount,\n            joinedAt: user.affiliate.createdAt.toISOString(),\n          }\n        : null,\n    };\n\n    res.json(response);\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    res.status(500).json({ error: \"خطأ في تسجيل الدخول\" });\n  }\n};\n\nexport const register: RequestHandler = async (req, res) => {\n  try {\n    const { email, name, password, wantAffiliate } = req.body;\n\n    if (!email || !password) {\n      return res\n        .status(400)\n        .json({ error: \"البريد الإلكتروني وكلمة المرور مطلوبان\" });\n    }\n\n    // Check if user already exists\n    const existingUser = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (existingUser) {\n      return res.status(400).json({ error: \"المستخدم موجود بالفعل\" });\n    }\n\n    // Create user\n    const user = await prisma.user.create({\n      data: {\n        email,\n        name,\n        role: \"USER\",\n        isActive: true,\n      },\n    });\n\n    // Create affiliate if requested\n    let affiliate = null;\n    if (wantAffiliate) {\n      affiliate = await prisma.affiliateUser.create({\n        data: {\n          userId: user.id,\n          affiliateCode: `REF${user.id.slice(-8).toUpperCase()}`,\n          commissionRate: 8,\n          totalEarnings: 0,\n          pendingEarnings: 0,\n          referralCount: 0,\n          status: \"ACTIVE\",\n        },\n      });\n    }\n\n    const token = `${user.id}-${Date.now()}`;\n\n    const response = {\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        avatar: user.avatar,\n        role: user.role,\n        isActive: user.isActive,\n        createdAt: user.createdAt.toISOString(),\n        updatedAt: user.updatedAt.toISOString(),\n      } as User,\n      token,\n      affiliate: affiliate\n        ? {\n            id: affiliate.id,\n            email: user.email,\n            name: user.name || \"\",\n            affiliateCode: affiliate.affiliateCode,\n            commissionRate: affiliate.commissionRate,\n            totalEarnings: affiliate.totalEarnings,\n            pendingEarnings: affiliate.pendingEarnings,\n            referralCount: affiliate.referralCount,\n            joinedAt: affiliate.createdAt.toISOString(),\n          }\n        : null,\n    };\n\n    res.status(201).json(response);\n  } catch (error) {\n    console.error(\"Registration error:\", error);\n    res.status(500).json({ error: \"خطأ في إنشاء الحساب\" });\n  }\n};\n\nexport const forgotPassword: RequestHandler = async (req, res) => {\n  try {\n    const { email } = req.body;\n\n    if (!email) {\n      return res.status(400).json({ error: \"البريد الإلكتروني مطلوب\" });\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (!user) {\n      // Don't reveal if email exists or not\n      return res.json({\n        message:\n          \"إذا كان البريد الإلكتروني موجود، ستصلك رسالة إعادة تعيين كلمة المرور\",\n      });\n    }\n\n    // In production, send actual email with reset token\n    // For demo, just return success\n    res.json({ message: \"تم إرسال رسالة إعادة تعيين كلمة المرور\" });\n  } catch (error) {\n    console.error(\"Forgot password error:\", error);\n    res.status(500).json({ error: \"خطأ في إرسال رسالة إعادة التعيين\" });\n  }\n};\n\nexport const getCurrentUser: RequestHandler = async (req, res) => {\n  try {\n    // In production, verify JWT token from Authorization header\n    const authHeader = req.headers.authorization;\n    if (!authHeader) {\n      return res.status(401).json({ error: \"غير مصرح\" });\n    }\n\n    const token = authHeader.replace(\"Bearer \", \"\");\n    const userId = token.split(\"-\")[0];\n\n    if (!userId) {\n      return res.status(401).json({ error: \"رمز غير صالح\" });\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { id: userId },\n      include: { affiliate: true },\n    });\n\n    if (!user || !user.isActive) {\n      return res.status(401).json({ error: \"مستخدم غير صالح\" });\n    }\n\n    const response = {\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        avatar: user.avatar,\n        role: user.role,\n        isActive: user.isActive,\n        createdAt: user.createdAt.toISOString(),\n        updatedAt: user.updatedAt.toISOString(),\n      } as User,\n      affiliate: user.affiliate\n        ? {\n            id: user.affiliate.id,\n            email: user.email,\n            name: user.name || \"\",\n            affiliateCode: user.affiliate.affiliateCode,\n            commissionRate: user.affiliate.commissionRate,\n            totalEarnings: user.affiliate.totalEarnings,\n            pendingEarnings: user.affiliate.pendingEarnings,\n            referralCount: user.affiliate.referralCount,\n            joinedAt: user.affiliate.createdAt.toISOString(),\n          }\n        : null,\n    };\n\n    res.json(response);\n  } catch (error) {\n    console.error(\"Get current user error:\", error);\n    res.status(500).json({ error: \"خطأ في جلب بيانات المستخدم\" });\n  }\n};\n","import { RequestHandler } from \"express\";\r\nimport { prisma } from \"@shared/db\";\r\n\r\n// Get user orders\r\nexport const getUserOrders: RequestHandler = async (req, res) => {\r\n  try {\r\n    const userId = req.query.userId as string;\r\n\r\n    if (!userId) {\r\n      return res.status(400).json({ error: \"User ID is required\" });\r\n    }\r\n\r\n    const orders = await prisma.order.findMany({\r\n      where: {\r\n        userId: userId,\r\n      },\r\n      include: {\r\n        items: {\r\n          include: {\r\n            product: {\r\n              select: {\r\n                id: true,\r\n                name: true,\r\n                images: true,\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      orderBy: {\r\n        createdAt: \"desc\",\r\n      },\r\n    });\r\n\r\n    // Format orders to match frontend expectations\r\n    const formattedOrders = orders.map((order) => {\r\n      const items = order.items.map((item) => ({\r\n        id: item.id,\r\n        productId: item.productId,\r\n        name: item.product.name,\r\n        price: item.price,\r\n        quantity: item.quantity,\r\n        image: item.product.images && item.product.images.length > 0\r\n          ? (item.product.images as any)[0]?.url || \"\"\r\n          : \"\",\r\n      }));\r\n\r\n      return {\r\n        id: order.id,\r\n        orderNumber: order.orderNumber,\r\n        date: order.createdAt.toISOString().split('T')[0],\r\n        status: order.status,\r\n        total: order.total,\r\n        itemsCount: order.items.length,\r\n        items: items,\r\n        shippingAddress: order.shippingAddress as {\r\n          city: string;\r\n          address: string;\r\n          phone: string;\r\n        },\r\n      };\r\n    });\r\n\r\n    res.json(formattedOrders);\r\n  } catch (error) {\r\n    console.error(\"Error fetching user orders:\", error);\r\n    res.status(500).json({ error: \"Failed to fetch orders\" });\r\n  }\r\n};\r\n\r\n// Get single order details\r\nexport const getOrderById: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const userId = req.query.userId as string;\r\n\r\n    if (!userId) {\r\n      return res.status(400).json({ error: \"User ID is required\" });\r\n    }\r\n\r\n    const order = await prisma.order.findFirst({\r\n      where: {\r\n        id: id,\r\n        userId: userId, // Ensure user can only access their own orders\r\n      },\r\n      include: {\r\n        items: {\r\n          include: {\r\n            product: {\r\n              select: {\r\n                id: true,\r\n                name: true,\r\n                images: true,\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!order) {\r\n      return res.status(404).json({ error: \"Order not found\" });\r\n    }\r\n\r\n    // Format order\r\n    const items = order.items.map((item) => ({\r\n      id: item.id,\r\n      productId: item.productId,\r\n      name: item.product.name,\r\n      price: item.price,\r\n      quantity: item.quantity,\r\n      total: item.total,\r\n      image: item.product.images && item.product.images.length > 0\r\n        ? (item.product.images as any)[0]?.url || \"\"\r\n        : \"\",\r\n    }));\r\n\r\n    const formattedOrder = {\r\n      id: order.id,\r\n      orderNumber: order.orderNumber,\r\n      date: order.createdAt.toISOString().split('T')[0],\r\n      status: order.status,\r\n      total: order.total,\r\n      subtotal: order.subtotal,\r\n      tax: order.tax,\r\n      shipping: order.shipping,\r\n      discount: order.discount,\r\n      paymentMethod: order.paymentMethod,\r\n      paymentStatus: order.paymentStatus,\r\n      itemsCount: order.items.length,\r\n      items: items,\r\n      shippingAddress: order.shippingAddress as {\r\n        name?: string;\r\n        city: string;\r\n        address: string;\r\n        phone: string;\r\n      },\r\n      billingAddress: order.billingAddress,\r\n      createdAt: order.createdAt.toISOString(),\r\n      updatedAt: order.updatedAt.toISOString(),\r\n    };\r\n\r\n    res.json(formattedOrder);\r\n  } catch (error) {\r\n    console.error(\"Error fetching order details:\", error);\r\n    res.status(500).json({ error: \"Failed to fetch order details\" });\r\n  }\r\n};\r\n","import { RequestHandler } from \"express\";\r\nimport { prisma } from \"@shared/db\";\r\n\r\n// Get product reviews\r\nexport const getProductReviews: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { productId } = req.params;\r\n\r\n    if (!productId) {\r\n      return res.status(400).json({ error: \"Product ID is required\" });\r\n    }\r\n\r\n    const reviews = await prisma.review.findMany({\r\n      where: {\r\n        productId: productId,\r\n      },\r\n      include: {\r\n        user: {\r\n          select: {\r\n            name: true,\r\n            email: true,\r\n          },\r\n        },\r\n      },\r\n      orderBy: {\r\n        createdAt: \"desc\",\r\n      },\r\n    });\r\n\r\n    // Calculate rating stats\r\n    const totalReviews = reviews.length;\r\n    const averageRating = totalReviews > 0\r\n      ? reviews.reduce((sum, r) => sum + r.rating, 0) / totalReviews\r\n      : 0;\r\n\r\n    const ratingDistribution = [5, 4, 3, 2, 1].map((stars) => {\r\n      const count = reviews.filter((r) => r.rating === stars).length;\r\n      return {\r\n        stars,\r\n        count,\r\n        percentage: totalReviews > 0 ? Math.round((count / totalReviews) * 100) : 0,\r\n      };\r\n    });\r\n\r\n    const formattedReviews = reviews.map((review) => ({\r\n      id: review.id,\r\n      rating: review.rating,\r\n      comment: review.comment,\r\n      userName: review.user.name,\r\n      userEmail: review.user.email,\r\n      date: review.createdAt.toISOString().split('T')[0],\r\n      createdAt: review.createdAt.toISOString(),\r\n    }));\r\n\r\n    res.json({\r\n      reviews: formattedReviews,\r\n      stats: {\r\n        totalReviews,\r\n        averageRating: Math.round(averageRating * 10) / 10,\r\n        ratingDistribution,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching product reviews:\", error);\r\n    res.status(500).json({ error: \"Failed to fetch reviews\" });\r\n  }\r\n};\r\n\r\n// Create review\r\nexport const createReview: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { productId, userId, rating, comment } = req.body;\r\n\r\n    if (!productId || !userId || !rating) {\r\n      return res.status(400).json({ error: \"Missing required fields\" });\r\n    }\r\n\r\n    if (rating < 1 || rating > 5) {\r\n      return res.status(400).json({ error: \"Rating must be between 1 and 5\" });\r\n    }\r\n\r\n    // Check if product exists\r\n    const product = await prisma.product.findUnique({\r\n      where: { id: productId },\r\n    });\r\n\r\n    if (!product) {\r\n      return res.status(404).json({ error: \"Product not found\" });\r\n    }\r\n\r\n    // Check if user already reviewed this product\r\n    const existingReview = await prisma.review.findUnique({\r\n      where: {\r\n        userId_productId: {\r\n          userId,\r\n          productId,\r\n        },\r\n      },\r\n    });\r\n\r\n    if (existingReview) {\r\n      return res.status(400).json({ error: \"You have already reviewed this product\" });\r\n    }\r\n\r\n    // Create review\r\n    const review = await prisma.review.create({\r\n      data: {\r\n        userId,\r\n        productId,\r\n        rating,\r\n        comment,\r\n      },\r\n      include: {\r\n        user: {\r\n          select: {\r\n            name: true,\r\n            email: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    res.status(201).json({\r\n      id: review.id,\r\n      rating: review.rating,\r\n      comment: review.comment,\r\n      userName: review.user.name,\r\n      userEmail: review.user.email,\r\n      date: review.createdAt.toISOString().split('T')[0],\r\n      createdAt: review.createdAt.toISOString(),\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error creating review:\", error);\r\n    res.status(500).json({ error: \"Failed to create review\" });\r\n  }\r\n};\r\n\r\n// Update review\r\nexport const updateReview: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { userId, rating, comment } = req.body;\r\n\r\n    if (!userId) {\r\n      return res.status(400).json({ error: \"User ID is required\" });\r\n    }\r\n\r\n    // Check if review exists and belongs to user\r\n    const existingReview = await prisma.review.findUnique({\r\n      where: { id },\r\n    });\r\n\r\n    if (!existingReview) {\r\n      return res.status(404).json({ error: \"Review not found\" });\r\n    }\r\n\r\n    if (existingReview.userId !== userId) {\r\n      return res.status(403).json({ error: \"You can only update your own reviews\" });\r\n    }\r\n\r\n    if (rating && (rating < 1 || rating > 5)) {\r\n      return res.status(400).json({ error: \"Rating must be between 1 and 5\" });\r\n    }\r\n\r\n    // Update review\r\n    const review = await prisma.review.update({\r\n      where: { id },\r\n      data: {\r\n        ...(rating && { rating }),\r\n        ...(comment !== undefined && { comment }),\r\n      },\r\n      include: {\r\n        user: {\r\n          select: {\r\n            name: true,\r\n            email: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    res.json({\r\n      id: review.id,\r\n      rating: review.rating,\r\n      comment: review.comment,\r\n      userName: review.user.name,\r\n      userEmail: review.user.email,\r\n      date: review.createdAt.toISOString().split('T')[0],\r\n      updatedAt: review.updatedAt.toISOString(),\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error updating review:\", error);\r\n    res.status(500).json({ error: \"Failed to update review\" });\r\n  }\r\n};\r\n\r\n// Delete review\r\nexport const deleteReview: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const userId = req.query.userId as string;\r\n\r\n    if (!userId) {\r\n      return res.status(400).json({ error: \"User ID is required\" });\r\n    }\r\n\r\n    // Check if review exists and belongs to user\r\n    const existingReview = await prisma.review.findUnique({\r\n      where: { id },\r\n    });\r\n\r\n    if (!existingReview) {\r\n      return res.status(404).json({ error: \"Review not found\" });\r\n    }\r\n\r\n    if (existingReview.userId !== userId) {\r\n      return res.status(403).json({ error: \"You can only delete your own reviews\" });\r\n    }\r\n\r\n    // Delete review\r\n    await prisma.review.delete({\r\n      where: { id },\r\n    });\r\n\r\n    res.json({ message: \"Review deleted successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error deleting review:\", error);\r\n    res.status(500).json({ error: \"Failed to delete review\" });\r\n  }\r\n};\r\n","import { RequestHandler } from 'express';\r\nimport puppeteer from 'puppeteer';\r\n\r\nconst LOGIN_URL = 'https://aff.ven-door.com/login';\r\nconst PRODUCTS_BASE_URL = 'https://aff.ven-door.com/products';\r\nconst AFFILIATE_ID = '29631';\r\n\r\ninterface ScrapingProgress {\r\n  currentPage: number;\r\n  totalPages: number;\r\n  productsFound: number;\r\n}\r\n\r\nlet scrapingProgress: ScrapingProgress = {\r\n  currentPage: 0,\r\n  totalPages: 0,\r\n  productsFound: 0\r\n};\r\n\r\n/**\r\n * تسجيل الدخول إلى Ven-door\r\n */\r\nasync function loginToVendoor(page: any, email: string, password: string) {\r\n  await page.goto(LOGIN_URL, { waitUntil: 'networkidle2', timeout: 30000 });\r\n  await new Promise(resolve => setTimeout(resolve, 2000));\r\n  \r\n  await page.waitForSelector('input[name=\"name\"]', { timeout: 5000 });\r\n  await page.type('input[name=\"name\"]', email, { delay: 50 });\r\n  await page.type('input[type=\"password\"]', password, { delay: 50 });\r\n  \r\n  await Promise.all([\r\n    page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 30000 }),\r\n    page.click('button[type=\"submit\"]')\r\n  ]).catch(() => {});\r\n  \r\n  await new Promise(resolve => setTimeout(resolve, 5000));\r\n  \r\n  const currentUrl = page.url();\r\n  if (currentUrl.includes('login')) {\r\n    throw new Error('فشل تسجيل الدخول - تحقق من البيانات');\r\n  }\r\n}\r\n\r\n/**\r\n * جلب المنتجات من صفحة واحدة\r\n */\r\nasync function scrapeProductsPage(page: any, pageNum: number) {\r\n  const url = `${PRODUCTS_BASE_URL}?page=${pageNum}`;\r\n  \r\n  await page.goto(url, { waitUntil: 'networkidle2', timeout: 30000 });\r\n  await new Promise(resolve => setTimeout(resolve, 1500));\r\n  \r\n  const products = await page.evaluate(() => {\r\n    const productsList: any[] = [];\r\n    const rows = document.querySelectorAll('table tbody tr');\r\n    \r\n    rows.forEach((row: any) => {\r\n      try {\r\n        const cells = row.querySelectorAll('td');\r\n        if (cells.length < 5) return;\r\n        \r\n        const imageCell = cells[0];\r\n        const nameCell = cells[1];\r\n        const supplierCell = cells[2];\r\n        const priceCell = cells[3];\r\n        const commissionCell = cells[4];\r\n        const stockCell = cells[5];\r\n        const actionCell = cells[7];\r\n        \r\n        const img = imageCell?.querySelector('img');\r\n        const image = img ? (img.src || img.getAttribute('data-src')) : '';\r\n        const title = nameCell?.textContent.trim() || '';\r\n        const supplier = supplierCell?.textContent.trim() || '';\r\n        const price = priceCell?.textContent.replace(/[^\\d]/g, '') || '';\r\n        const commission = commissionCell?.textContent.replace(/[^\\d]/g, '') || '';\r\n        const stock = stockCell?.textContent.trim() || '';\r\n        \r\n        const orderLink = actionCell?.querySelector('a[href*=\"orders/create\"]');\r\n        let productId = '';\r\n        \r\n        if (orderLink) {\r\n          const href = orderLink.href;\r\n          const match = href.match(/product[=\\/](\\d+)/);\r\n          if (match) productId = match[1];\r\n        }\r\n        \r\n        if (title && productId) {\r\n          productsList.push({\r\n            id: productId,\r\n            title,\r\n            supplier,\r\n            price,\r\n            commission,\r\n            stock,\r\n            image,\r\n            orderLink: orderLink?.href || ''\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing row:', error);\r\n      }\r\n    });\r\n    \r\n    return productsList;\r\n  });\r\n  \r\n  return products;\r\n}\r\n\r\n/**\r\n * جلب تفاصيل منتج واحد\r\n */\r\nasync function fetchProductDetails(page: any, productId: string) {\r\n  const url = `https://aff.ven-door.com/affiliates/${AFFILIATE_ID}/orders/create?product=${productId}`;\r\n  \r\n  await page.goto(url, { waitUntil: 'networkidle2', timeout: 30000 });\r\n  await new Promise(resolve => setTimeout(resolve, 2000));\r\n  \r\n  const details = await page.evaluate(() => {\r\n    const data: any = {\r\n      variations: {},\r\n      stockDetails: {},\r\n      shipping: '',\r\n      description: ''\r\n    };\r\n    \r\n    const sizeSelect = document.querySelector('select[name=\"sizePro[]\"]');\r\n    if (sizeSelect) {\r\n      const options = Array.from(sizeSelect.querySelectorAll('option'));\r\n      options.forEach((option: any) => {\r\n        if (option.value && option.textContent) {\r\n          const text = option.textContent.trim();\r\n          const match = text.match(/الكمية=>\\s*\\(([^)]+)\\)\\s*-\\s*المقاس=>\\(([^)]+)\\)/);\r\n          \r\n          if (match) {\r\n            const quantity = parseInt(match[1].trim()) || 0;\r\n            const sizeInfo = match[2].trim();\r\n            const parts = sizeInfo.split(/\\s+/);\r\n            const size = parts[parts.length - 1];\r\n            const color = parts.slice(0, -1).join(' ');\r\n            \r\n            if (!data.variations[color]) {\r\n              data.variations[color] = [];\r\n            }\r\n            \r\n            if (!data.variations[color].includes(size)) {\r\n              data.variations[color].push(size);\r\n            }\r\n            \r\n            data.stockDetails[`${color} ${size}`] = quantity;\r\n          }\r\n        }\r\n      });\r\n    }\r\n    \r\n    const shippingText = document.body.innerText;\r\n    const shippingMatch = shippingText.match(/تكلفة الشحن\\s+(\\d+)/);\r\n    if (shippingMatch) {\r\n      data.shipping = shippingMatch[1];\r\n    }\r\n    \r\n    return data;\r\n  });\r\n  \r\n  return details;\r\n}\r\n\r\n/**\r\n * API: جلب جميع المنتجات\r\n */\r\nexport const scrapeAllProducts: RequestHandler = async (req, res) => {\r\n  const { email, password, maxPages = 41 } = req.body;\r\n  \r\n  if (!email || !password) {\r\n    return res.status(400).json({ \r\n      error: 'البريد الإلكتروني وكلمة المرور مطلوبان' \r\n    });\r\n  }\r\n  \r\n  let browser;\r\n  try {\r\n    scrapingProgress = {\r\n      currentPage: 0,\r\n      totalPages: maxPages,\r\n      productsFound: 0\r\n    };\r\n    \r\n    browser = await puppeteer.launch({\r\n      headless: true,\r\n      args: ['--no-sandbox', '--disable-setuid-sandbox']\r\n    });\r\n    \r\n    const page = await browser.newPage();\r\n    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');\r\n    \r\n    // تسجيل الدخول\r\n    await loginToVendoor(page, email, password);\r\n    \r\n    // جلب المنتجات\r\n    const allProducts: any[] = [];\r\n    \r\n    for (let pageNum = 1; pageNum <= maxPages; pageNum++) {\r\n      scrapingProgress.currentPage = pageNum;\r\n      \r\n      const products = await scrapeProductsPage(page, pageNum);\r\n      \r\n      if (products.length === 0) {\r\n        console.log(`صفحة ${pageNum} فارغة - توقف`);\r\n        break;\r\n      }\r\n      \r\n      allProducts.push(...products);\r\n      scrapingProgress.productsFound = allProducts.length;\r\n      \r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n    }\r\n    \r\n    await browser.close();\r\n    \r\n    res.json({\r\n      success: true,\r\n      totalProducts: allProducts.length,\r\n      lastPage: scrapingProgress.currentPage,\r\n      products: allProducts\r\n    });\r\n    \r\n  } catch (error: any) {\r\n    console.error('Error scraping products:', error);\r\n    \r\n    if (browser) {\r\n      await browser.close();\r\n    }\r\n    \r\n    res.status(500).json({ \r\n      error: error.message || 'فشل جلب المنتجات' \r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * API: جلب تقدم العملية\r\n */\r\nexport const getScrapingProgress: RequestHandler = (req, res) => {\r\n  res.json(scrapingProgress);\r\n};\r\n\r\n/**\r\n * API: استيراد منتج واحد\r\n */\r\nexport const importProduct: RequestHandler = async (req, res) => {\r\n  const { productId, vendoorEmail, vendoorPassword } = req.body;\r\n  \r\n  if (!productId || !vendoorEmail || !vendoorPassword) {\r\n    return res.status(400).json({ \r\n      error: 'بيانات غير كاملة' \r\n    });\r\n  }\r\n  \r\n  let browser;\r\n  try {\r\n    browser = await puppeteer.launch({\r\n      headless: true,\r\n      args: ['--no-sandbox', '--disable-setuid-sandbox']\r\n    });\r\n    \r\n    const page = await browser.newPage();\r\n    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');\r\n    \r\n    // تسجيل الدخول\r\n    await loginToVendoor(page, vendoorEmail, vendoorPassword);\r\n    \r\n    // جلب التفاصيل\r\n    const details = await fetchProductDetails(page, productId);\r\n    \r\n    await browser.close();\r\n    \r\n    // هنا سيتم إضافة المنتج إلى قاعدة البيانات\r\n    // يمكنك إضافة الكود لحفظ المنتج في Appwrite\r\n    \r\n    res.json({\r\n      success: true,\r\n      productId,\r\n      details\r\n    });\r\n    \r\n  } catch (error: any) {\r\n    console.error('Error importing product:', error);\r\n    \r\n    if (browser) {\r\n      await browser.close();\r\n    }\r\n    \r\n    res.status(500).json({ \r\n      error: error.message || 'فشل استيراد المنتج' \r\n    });\r\n  }\r\n};\r\n","import { RequestHandler } from 'express';\r\n\r\n// ============================================\r\n// RBAC & Security APIs\r\n// ============================================\r\n\r\nexport interface Role {\r\n  id: string;\r\n  name: string;\r\n  permissions: string[];\r\n  createdAt: Date;\r\n}\r\n\r\nexport interface AuditLog {\r\n  id: string;\r\n  userId: string;\r\n  action: string;\r\n  resource: string;\r\n  ipAddress: string;\r\n  success: boolean;\r\n  timestamp: Date;\r\n}\r\n\r\n// GET /api/rbac/roles - قائمة جميع الأدوار\r\nexport const getRoles: RequestHandler = async (req, res) => {\r\n  try {\r\n    // جلب الأدوار من Appwrite database\r\n    const { listDocuments } = require('../lib/appwrite');\r\n    const result = await listDocuments('roles');\r\n    res.json(result.documents);\r\n  } catch (error) {\r\n    console.error('Error fetching roles:', error);\r\n    res.status(500).json({ error: 'Failed to fetch roles' });\r\n  }\r\n};\r\n\r\n// POST /api/rbac/roles - إنشاء دور جديد\r\nexport const createRole: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { name, permissions } = req.body;\r\n    \r\n    // Validation\r\n    if (!name || !permissions || !Array.isArray(permissions)) {\r\n      return res.status(400).json({ \r\n        error: 'Name and permissions array are required' \r\n      });\r\n    }\r\n    \r\n    // Validate permission types\r\n    const validPermissions = ['read', 'write', 'delete', 'admin'];\r\n    const invalidPerms = permissions.filter(p => !validPermissions.includes(p));\r\n    \r\n    if (invalidPerms.length > 0) {\r\n      return res.status(400).json({ \r\n        error: `Invalid permissions: ${invalidPerms.join(', ')}` \r\n      });\r\n    }\r\n    \r\n    // حفظ الدور في Appwrite database\r\n    let created;\r\n    try {\r\n      const { createDocument } = require('../lib/appwrite');\r\n      created = await createDocument('roles', {\r\n        name,\r\n        permissions,\r\n        createdAt: new Date().toISOString()\r\n      });\r\n    } catch (dbError) {\r\n      console.error('Error saving role to DB:', dbError);\r\n      await logAudit({\r\n        userId: req.headers['x-user-id'] as string || 'system',\r\n        action: 'create',\r\n        resource: 'role',\r\n        ipAddress: req.ip || 'unknown',\r\n        success: false\r\n      });\r\n      return res.status(500).json({ error: 'Failed to save role to database' });\r\n    }\r\n    // Log audit\r\n    await logAudit({\r\n      userId: req.headers['x-user-id'] as string || 'system',\r\n      action: 'create',\r\n      resource: 'role',\r\n      ipAddress: req.ip || 'unknown',\r\n      success: true\r\n    });\r\n    res.status(201).json(created);\r\n  } catch (error) {\r\n    console.error('Error creating role:', error);\r\n    \r\n    await logAudit({\r\n      userId: req.headers['x-user-id'] as string || 'system',\r\n      action: 'create',\r\n      resource: 'role',\r\n      ipAddress: req.ip || 'unknown',\r\n      success: false\r\n    });\r\n    \r\n    res.status(500).json({ error: 'Failed to create role' });\r\n  }\r\n};\r\n\r\n// PUT /api/rbac/roles/:id - تحديث دور\r\nexport const updateRole: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { name, permissions } = req.body;\r\n    \r\n    if (!id) {\r\n      return res.status(400).json({ error: 'Role ID is required' });\r\n    }\r\n    \r\n    // تحديث الدور في Appwrite database\r\n    let updated;\r\n    try {\r\n      const { updateDocument } = require('../lib/appwrite');\r\n      updated = await updateDocument('roles', id, {\r\n        name,\r\n        permissions\r\n      });\r\n    } catch (dbError) {\r\n      console.error('Error updating role in DB:', dbError);\r\n      await logAudit({\r\n        userId: req.headers['x-user-id'] as string || 'system',\r\n        action: 'update',\r\n        resource: 'role',\r\n        ipAddress: req.ip || 'unknown',\r\n        success: false\r\n      });\r\n      return res.status(500).json({ error: 'Failed to update role in database' });\r\n    }\r\n    await logAudit({\r\n      userId: req.headers['x-user-id'] as string || 'system',\r\n      action: 'update',\r\n      resource: 'role',\r\n      ipAddress: req.ip || 'unknown',\r\n      success: true\r\n    });\r\n    res.json(updated);\r\n  } catch (error) {\r\n    console.error('Error updating role:', error);\r\n    \r\n    await logAudit({\r\n      userId: req.headers['x-user-id'] as string || 'system',\r\n      action: 'update',\r\n      resource: 'role',\r\n      ipAddress: req.ip || 'unknown',\r\n      success: false\r\n    });\r\n    \r\n    res.status(500).json({ error: 'Failed to update role' });\r\n  }\r\n};\r\n\r\n// GET /api/rbac/audit-logs - سجل التدقيق\r\nexport const getAuditLogs: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { page = 1, limit = 20, userId, action, resource } = req.query;\r\n    \r\n    // جلب سجل التدقيق من Appwrite database مع الفلترة\r\n    const { listDocuments, Query } = require('../lib/appwrite');\r\n    const queries: any[] = [];\r\n    if (userId) queries.push(Query.equal('userId', String(userId)));\r\n    if (action) queries.push(Query.equal('action', String(action)));\r\n    if (resource) queries.push(Query.equal('resource', String(resource)));\r\n    queries.push(Query.orderDesc('timestamp'));\r\n    queries.push(Query.limit(Number(limit)));\r\n    queries.push(Query.offset((Number(page) - 1) * Number(limit)));\r\n    const result = await listDocuments('audit_logs', queries);\r\n    res.json({\r\n      logs: result.documents,\r\n      pagination: {\r\n        page: Number(page),\r\n        limit: Number(limit),\r\n        total: result.total,\r\n        totalPages: Math.ceil(result.total / Number(limit))\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching audit logs:', error);\r\n    res.status(500).json({ error: 'Failed to fetch audit logs' });\r\n  }\r\n};\r\n\r\n// POST /api/rbac/check-permission - فحص الصلاحيات\r\nexport const checkPermission: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { userId, resource, action } = req.body;\r\n    \r\n    if (!userId || !resource || !action) {\r\n      return res.status(400).json({ \r\n        error: 'userId, resource, and action are required' \r\n      });\r\n    }\r\n    \r\n    // فحص الصلاحيات من Appwrite database\r\n    let hasPermission = false;\r\n    try {\r\n      const { listDocuments, Query } = require('../lib/appwrite');\r\n      // جلب دور المستخدم\r\n      const userResult = await listDocuments('users', [Query.equal('userId', userId), Query.limit(1)]);\r\n      let userRole = '';\r\n      if (userResult.documents.length > 0) {\r\n        userRole = userResult.documents[0].role;\r\n      }\r\n      // جلب صلاحيات الدور\r\n      let permissions: string[] = [];\r\n      if (userRole) {\r\n        const roleResult = await listDocuments('roles', [Query.equal('name', userRole), Query.limit(1)]);\r\n        if (roleResult.documents.length > 0) {\r\n          permissions = roleResult.documents[0].permissions;\r\n        }\r\n      }\r\n      hasPermission = permissions.includes(action) || userRole === 'admin';\r\n    } catch (e) {\r\n      console.error('Error checking permission from DB:', e);\r\n    }\r\n    await logAudit({\r\n      userId,\r\n      action: 'check-permission',\r\n      resource,\r\n      ipAddress: req.ip || 'unknown',\r\n      success: hasPermission\r\n    });\r\n    res.json({ \r\n      hasPermission,\r\n      userId,\r\n      resource,\r\n      action,\r\n      timestamp: new Date()\r\n    });\r\n  } catch (error) {\r\n    console.error('Error checking permission:', error);\r\n    res.status(500).json({ error: 'Permission check failed' });\r\n  }\r\n};\r\n\r\n// Helper function للـ audit logging\r\nasync function logAudit(data: Omit<AuditLog, 'id' | 'timestamp'>) {\r\n  try {\r\n    const { createDocument } = require('../lib/appwrite');\r\n    await createDocument('audit_logs', {\r\n      ...data,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  } catch (error) {\r\n    console.error('Failed to log audit:', error);\r\n  }\r\n}\r\n","import { RequestHandler } from 'express';\r\n\r\n// ============================================\r\n// Smart Contracts APIs\r\n// ============================================\r\n\r\nexport interface SmartContract {\r\n  id: string;\r\n  userId: string;\r\n  type: 'affiliate' | 'merchant';\r\n  terms: {\r\n    commissionRate: number;\r\n    paymentSchedule: string;\r\n    minimumSales?: number;\r\n    bonusThreshold?: number;\r\n  };\r\n  performance: {\r\n    totalSales: number;\r\n    commissionsEarned: number;\r\n    ordersCompleted: number;\r\n    conversionRate: number;\r\n  };\r\n  status: 'active' | 'pending' | 'suspended' | 'terminated';\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\n// GET /api/contracts - قائمة جميع العقود\r\nexport const getContracts: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { userId, type, status } = req.query;\r\n    \r\n    // TODO: جلب من Appwrite database\r\n    const contracts: SmartContract[] = [\r\n      {\r\n        id: '1',\r\n        userId: 'user-123',\r\n        type: 'affiliate',\r\n        terms: {\r\n          commissionRate: 10,\r\n          paymentSchedule: 'monthly',\r\n          minimumSales: 1000,\r\n          bonusThreshold: 5000\r\n        },\r\n        performance: {\r\n          totalSales: 15000,\r\n          commissionsEarned: 1500,\r\n          ordersCompleted: 45,\r\n          conversionRate: 3.2\r\n        },\r\n        status: 'active',\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      },\r\n      {\r\n        id: '2',\r\n        userId: 'user-456',\r\n        type: 'merchant',\r\n        terms: {\r\n          commissionRate: 5,\r\n          paymentSchedule: 'weekly'\r\n        },\r\n        performance: {\r\n          totalSales: 50000,\r\n          commissionsEarned: 2500,\r\n          ordersCompleted: 120,\r\n          conversionRate: 4.5\r\n        },\r\n        status: 'active',\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      }\r\n    ];\r\n    \r\n    // Filter\r\n    let filtered = contracts;\r\n    if (userId) {\r\n      filtered = filtered.filter(c => c.userId === userId);\r\n    }\r\n    if (type) {\r\n      filtered = filtered.filter(c => c.type === type);\r\n    }\r\n    if (status) {\r\n      filtered = filtered.filter(c => c.status === status);\r\n    }\r\n    \r\n    res.json(filtered);\r\n  } catch (error) {\r\n    console.error('Error fetching contracts:', error);\r\n    res.status(500).json({ error: 'Failed to fetch contracts' });\r\n  }\r\n};\r\n\r\n// POST /api/contracts - إنشاء عقد جديد\r\nexport const createContract: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { userId, type, terms } = req.body;\r\n    \r\n    // Validation\r\n    if (!userId || !type || !terms) {\r\n      return res.status(400).json({ \r\n        error: 'userId, type, and terms are required' \r\n      });\r\n    }\r\n    \r\n    if (!['affiliate', 'merchant'].includes(type)) {\r\n      return res.status(400).json({ \r\n        error: 'type must be either \"affiliate\" or \"merchant\"' \r\n      });\r\n    }\r\n    \r\n    if (!terms.commissionRate || !terms.paymentSchedule) {\r\n      return res.status(400).json({ \r\n        error: 'commissionRate and paymentSchedule are required in terms' \r\n      });\r\n    }\r\n    \r\n    const newContract: SmartContract = {\r\n      id: Date.now().toString(),\r\n      userId,\r\n      type,\r\n      terms: {\r\n        commissionRate: terms.commissionRate,\r\n        paymentSchedule: terms.paymentSchedule,\r\n        minimumSales: terms.minimumSales || 0,\r\n        bonusThreshold: terms.bonusThreshold\r\n      },\r\n      performance: {\r\n        totalSales: 0,\r\n        commissionsEarned: 0,\r\n        ordersCompleted: 0,\r\n        conversionRate: 0\r\n      },\r\n      status: 'pending',\r\n      createdAt: new Date(),\r\n      updatedAt: new Date()\r\n    };\r\n    \r\n    // TODO: حفظ في Appwrite database\r\n    \r\n    res.status(201).json(newContract);\r\n  } catch (error) {\r\n    console.error('Error creating contract:', error);\r\n    res.status(500).json({ error: 'Failed to create contract' });\r\n  }\r\n};\r\n\r\n// PUT /api/contracts/:id - تحديث عقد\r\nexport const updateContract: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { terms, status } = req.body;\r\n    \r\n    if (!id) {\r\n      return res.status(400).json({ error: 'Contract ID is required' });\r\n    }\r\n    \r\n    // TODO: جلب العقد الحالي من database وتحديثه\r\n    \r\n    const updatedContract: SmartContract = {\r\n      id,\r\n      userId: 'user-123',\r\n      type: 'affiliate',\r\n      terms: terms || {\r\n        commissionRate: 10,\r\n        paymentSchedule: 'monthly'\r\n      },\r\n      performance: {\r\n        totalSales: 15000,\r\n        commissionsEarned: 1500,\r\n        ordersCompleted: 45,\r\n        conversionRate: 3.2\r\n      },\r\n      status: status || 'active',\r\n      createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 30), // 30 days ago\r\n      updatedAt: new Date()\r\n    };\r\n    \r\n    res.json(updatedContract);\r\n  } catch (error) {\r\n    console.error('Error updating contract:', error);\r\n    res.status(500).json({ error: 'Failed to update contract' });\r\n  }\r\n};\r\n\r\n// GET /api/contracts/performance/:id - أداء العقد\r\nexport const getContractPerformance: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { period = '30d' } = req.query; // 7d, 30d, 90d, 1y\r\n    \r\n    if (!id) {\r\n      return res.status(400).json({ error: 'Contract ID is required' });\r\n    }\r\n    \r\n    // TODO: حساب الأداء من database\r\n    const performance = {\r\n      contractId: id,\r\n      period,\r\n      metrics: {\r\n        totalSales: 15000,\r\n        commissionsEarned: 1500,\r\n        ordersCompleted: 45,\r\n        conversionRate: 3.2,\r\n        averageOrderValue: 333.33,\r\n        returnRate: 2.1\r\n      },\r\n      trends: {\r\n        salesGrowth: 15.5, // percentage\r\n        orderGrowth: 12.3,\r\n        conversionImprovement: 0.5\r\n      },\r\n      milestones: [\r\n        {\r\n          name: 'First Sale',\r\n          achievedAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 25),\r\n          value: 100\r\n        },\r\n        {\r\n          name: '$10K Sales',\r\n          achievedAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 10),\r\n          value: 10000\r\n        }\r\n      ],\r\n      projections: {\r\n        nextMonth: {\r\n          estimatedSales: 18000,\r\n          estimatedCommissions: 1800\r\n        },\r\n        bonusEligible: true,\r\n        bonusAmount: 500\r\n      }\r\n    };\r\n    \r\n    res.json(performance);\r\n  } catch (error) {\r\n    console.error('Error fetching contract performance:', error);\r\n    res.status(500).json({ error: 'Failed to fetch performance' });\r\n  }\r\n};\r\n","import { RequestHandler } from 'express';\r\n\r\n// ============================================\r\n// A/B Testing & Experiments APIs\r\n// ============================================\r\n\r\nexport interface ABTest {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  variants: {\r\n    id: string;\r\n    name: string;\r\n    trafficPercentage: number;\r\n    conversionRate: number;\r\n    visitors: number;\r\n    conversions: number;\r\n    revenue: number;\r\n  }[];\r\n  status: 'draft' | 'running' | 'paused' | 'completed';\r\n  winner?: string;\r\n  startDate: Date;\r\n  endDate?: Date;\r\n  createdAt: Date;\r\n}\r\n\r\n// GET /api/ab-tests - قائمة جميع الاختبارات\r\nexport const getABTests: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { status, includeArchived = 'false' } = req.query;\r\n    \r\n    // TODO: جلب من Appwrite database\r\n    const tests: ABTest[] = [\r\n      {\r\n        id: '1',\r\n        name: 'Homepage Banner Test',\r\n        description: 'Testing different banner designs',\r\n        variants: [\r\n          {\r\n            id: 'variant-a',\r\n            name: 'Original',\r\n            trafficPercentage: 50,\r\n            conversionRate: 3.2,\r\n            visitors: 1000,\r\n            conversions: 32,\r\n            revenue: 1600\r\n          },\r\n          {\r\n            id: 'variant-b',\r\n            name: 'New Design',\r\n            trafficPercentage: 50,\r\n            conversionRate: 4.5,\r\n            visitors: 1000,\r\n            conversions: 45,\r\n            revenue: 2250\r\n          }\r\n        ],\r\n        status: 'running',\r\n        startDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7),\r\n        createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 10)\r\n      },\r\n      {\r\n        id: '2',\r\n        name: 'Checkout Flow Test',\r\n        description: 'Testing one-page vs multi-step checkout',\r\n        variants: [\r\n          {\r\n            id: 'variant-a',\r\n            name: 'One Page',\r\n            trafficPercentage: 50,\r\n            conversionRate: 5.1,\r\n            visitors: 500,\r\n            conversions: 25,\r\n            revenue: 1875\r\n          },\r\n          {\r\n            id: 'variant-b',\r\n            name: 'Multi Step',\r\n            trafficPercentage: 50,\r\n            conversionRate: 6.8,\r\n            visitors: 500,\r\n            conversions: 34,\r\n            revenue: 2550\r\n          }\r\n        ],\r\n        status: 'completed',\r\n        winner: 'variant-b',\r\n        startDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 30),\r\n        endDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 15),\r\n        createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 35)\r\n      }\r\n    ];\r\n    \r\n    // Filter\r\n    let filtered = tests;\r\n    if (status && status !== 'all') {\r\n      filtered = filtered.filter(t => t.status === status);\r\n    }\r\n    if (includeArchived === 'false') {\r\n      filtered = filtered.filter(t => t.status !== 'completed');\r\n    }\r\n    \r\n    res.json(filtered);\r\n  } catch (error) {\r\n    console.error('Error fetching A/B tests:', error);\r\n    res.status(500).json({ error: 'Failed to fetch A/B tests' });\r\n  }\r\n};\r\n\r\n// POST /api/ab-tests - إنشاء اختبار جديد\r\nexport const createABTest: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { name, description, variants } = req.body;\r\n    \r\n    // Validation\r\n    if (!name || !variants || !Array.isArray(variants) || variants.length < 2) {\r\n      return res.status(400).json({ \r\n        error: 'name and at least 2 variants are required' \r\n      });\r\n    }\r\n    \r\n    // Validate traffic percentage adds up to 100\r\n    const totalTraffic = variants.reduce((sum, v) => sum + (v.trafficPercentage || 0), 0);\r\n    if (Math.abs(totalTraffic - 100) > 0.01) {\r\n      return res.status(400).json({ \r\n        error: 'Traffic percentages must add up to 100' \r\n      });\r\n    }\r\n    \r\n    const newTest: ABTest = {\r\n      id: Date.now().toString(),\r\n      name,\r\n      description: description || '',\r\n      variants: variants.map(v => ({\r\n        id: `variant-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n        name: v.name,\r\n        trafficPercentage: v.trafficPercentage,\r\n        conversionRate: 0,\r\n        visitors: 0,\r\n        conversions: 0,\r\n        revenue: 0\r\n      })),\r\n      status: 'draft',\r\n      startDate: new Date(),\r\n      createdAt: new Date()\r\n    };\r\n    \r\n    // TODO: حفظ في Appwrite database\r\n    \r\n    res.status(201).json(newTest);\r\n  } catch (error) {\r\n    console.error('Error creating A/B test:', error);\r\n    res.status(500).json({ error: 'Failed to create A/B test' });\r\n  }\r\n};\r\n\r\n// PUT /api/ab-tests/:id/winner - تعيين الفائز\r\nexport const setABTestWinner: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { variantId } = req.body;\r\n    \r\n    if (!id || !variantId) {\r\n      return res.status(400).json({ \r\n        error: 'Test ID and variant ID are required' \r\n      });\r\n    }\r\n    \r\n    // TODO: تحديث في database\r\n    const updatedTest: ABTest = {\r\n      id,\r\n      name: 'Homepage Banner Test',\r\n      description: 'Testing different banner designs',\r\n      variants: [\r\n        {\r\n          id: 'variant-a',\r\n          name: 'Original',\r\n          trafficPercentage: 50,\r\n          conversionRate: 3.2,\r\n          visitors: 1000,\r\n          conversions: 32,\r\n          revenue: 1600\r\n        },\r\n        {\r\n          id: 'variant-b',\r\n          name: 'New Design',\r\n          trafficPercentage: 50,\r\n          conversionRate: 4.5,\r\n          visitors: 1000,\r\n          conversions: 45,\r\n          revenue: 2250\r\n        }\r\n      ],\r\n      status: 'completed',\r\n      winner: variantId,\r\n      startDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7),\r\n      endDate: new Date(),\r\n      createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 10)\r\n    };\r\n    \r\n    res.json(updatedTest);\r\n  } catch (error) {\r\n    console.error('Error setting winner:', error);\r\n    res.status(500).json({ error: 'Failed to set winner' });\r\n  }\r\n};\r\n\r\n// GET /api/ab-tests/:id/results - نتائج الاختبار\r\nexport const getABTestResults: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    \r\n    if (!id) {\r\n      return res.status(400).json({ error: 'Test ID is required' });\r\n    }\r\n    \r\n    // TODO: حساب النتائج من database\r\n    const results = {\r\n      testId: id,\r\n      testName: 'Homepage Banner Test',\r\n      duration: {\r\n        days: 7,\r\n        startDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7),\r\n        endDate: new Date()\r\n      },\r\n      variants: [\r\n        {\r\n          id: 'variant-a',\r\n          name: 'Original',\r\n          metrics: {\r\n            visitors: 1000,\r\n            conversions: 32,\r\n            conversionRate: 3.2,\r\n            revenue: 1600,\r\n            averageOrderValue: 50,\r\n            bounceRate: 45.2\r\n          },\r\n          confidence: 95.3,\r\n          isWinner: false\r\n        },\r\n        {\r\n          id: 'variant-b',\r\n          name: 'New Design',\r\n          metrics: {\r\n            visitors: 1000,\r\n            conversions: 45,\r\n            conversionRate: 4.5,\r\n            revenue: 2250,\r\n            averageOrderValue: 50,\r\n            bounceRate: 38.7\r\n          },\r\n          confidence: 98.1,\r\n          isWinner: true\r\n        }\r\n      ],\r\n      analysis: {\r\n        significantDifference: true,\r\n        pValue: 0.023,\r\n        liftPercentage: 40.6, // (4.5 - 3.2) / 3.2 * 100\r\n        recommendedAction: 'Deploy variant-b to 100% of traffic',\r\n        estimatedImpact: {\r\n          monthlyRevenue: 10000,\r\n          annualRevenue: 120000\r\n        }\r\n      }\r\n    };\r\n    \r\n    res.json(results);\r\n  } catch (error) {\r\n    console.error('Error fetching test results:', error);\r\n    res.status(500).json({ error: 'Failed to fetch results' });\r\n  }\r\n};\r\n","import { RequestHandler } from 'express';\r\n\r\n// ============================================\r\n// Customer Experience APIs\r\n// ============================================\r\n\r\n// POST /api/ai/chat - المساعد الذكي\r\nexport const aiChat: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { message, userId, context } = req.body;\r\n    \r\n    if (!message) {\r\n      return res.status(400).json({ error: 'Message is required' });\r\n    }\r\n    \r\n    // TODO: ربط مع OpenAI API\r\n    // const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\r\n    // const response = await openai.chat.completions.create({ ... });\r\n    \r\n    // Mock response\r\n    const aiResponse = {\r\n      id: Date.now().toString(),\r\n      message,\r\n      response: `شكراً لرسالتك! أنا هنا لمساعدتك. ${message.includes('منتج') ? 'يمكنني اقتراح منتجات مناسبة لك.' : 'كيف يمكنني مساعدتك اليوم؟'}`,\r\n      suggestions: [\r\n        'عرض المنتجات الأكثر مبيعاً',\r\n        'مساعدة في اختيار مقاس',\r\n        'تتبع طلبي',\r\n        'استفسار عن الشحن'\r\n      ],\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    // TODO: حفظ المحادثة في database\r\n    \r\n    res.json(aiResponse);\r\n  } catch (error) {\r\n    console.error('Error in AI chat:', error);\r\n    res.status(500).json({ error: 'Failed to process chat message' });\r\n  }\r\n};\r\n\r\n// POST /api/ar/models - إضافة نموذج AR\r\nexport const createARModel: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { productId, modelUrl, size, format } = req.body;\r\n    \r\n    if (!productId || !modelUrl || !format) {\r\n      return res.status(400).json({ \r\n        error: 'productId, modelUrl, and format are required' \r\n      });\r\n    }\r\n    \r\n    if (!['glb', 'usdz'].includes(format)) {\r\n      return res.status(400).json({ \r\n        error: 'format must be either \"glb\" or \"usdz\"' \r\n      });\r\n    }\r\n    \r\n    const arModel = {\r\n      id: Date.now().toString(),\r\n      productId,\r\n      modelUrl,\r\n      size: size || 1.0,\r\n      format,\r\n      createdAt: new Date()\r\n    };\r\n    \r\n    // TODO: حفظ في database\r\n    \r\n    res.status(201).json(arModel);\r\n  } catch (error) {\r\n    console.error('Error creating AR model:', error);\r\n    res.status(500).json({ error: 'Failed to create AR model' });\r\n  }\r\n};\r\n\r\n// GET /api/ar/models/:productId - جلب نماذج AR لمنتج\r\nexport const getARModels: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { productId } = req.params;\r\n    \r\n    if (!productId) {\r\n      return res.status(400).json({ error: 'Product ID is required' });\r\n    }\r\n    \r\n    // TODO: جلب من database\r\n    const models = [\r\n      {\r\n        id: '1',\r\n        productId,\r\n        modelUrl: `https://cdn.egygo.com/ar-models/${productId}.glb`,\r\n        size: 1.2,\r\n        format: 'glb',\r\n        createdAt: new Date()\r\n      },\r\n      {\r\n        id: '2',\r\n        productId,\r\n        modelUrl: `https://cdn.egygo.com/ar-models/${productId}.usdz`,\r\n        size: 1.2,\r\n        format: 'usdz',\r\n        createdAt: new Date()\r\n      }\r\n    ];\r\n    \r\n    res.json(models);\r\n  } catch (error) {\r\n    console.error('Error fetching AR models:', error);\r\n    res.status(500).json({ error: 'Failed to fetch AR models' });\r\n  }\r\n};\r\n\r\n// POST /api/family/accounts - إنشاء حساب عائلي\r\nexport const createFamilyAccount: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { name, createdBy } = req.body;\r\n    \r\n    if (!name || !createdBy) {\r\n      return res.status(400).json({ \r\n        error: 'name and createdBy are required' \r\n      });\r\n    }\r\n    \r\n    const familyAccount = {\r\n      id: Date.now().toString(),\r\n      name,\r\n      createdBy,\r\n      members: [\r\n        {\r\n          userId: createdBy,\r\n          role: 'admin',\r\n          joinedAt: new Date()\r\n        }\r\n      ],\r\n      sharedCart: [],\r\n      sharedWishlist: [],\r\n      createdAt: new Date()\r\n    };\r\n    \r\n    // TODO: حفظ في database\r\n    \r\n    res.status(201).json(familyAccount);\r\n  } catch (error) {\r\n    console.error('Error creating family account:', error);\r\n    res.status(500).json({ error: 'Failed to create family account' });\r\n  }\r\n};\r\n\r\n// GET /api/family/accounts/:id - جلب حساب عائلي\r\nexport const getFamilyAccount: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    \r\n    if (!id) {\r\n      return res.status(400).json({ error: 'Account ID is required' });\r\n    }\r\n    \r\n    // TODO: جلب من database\r\n    const familyAccount = {\r\n      id,\r\n      name: 'عائلة أحمد',\r\n      createdBy: 'user-123',\r\n      members: [\r\n        {\r\n          userId: 'user-123',\r\n          userName: 'أحمد محمد',\r\n          role: 'admin',\r\n          joinedAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 30)\r\n        },\r\n        {\r\n          userId: 'user-456',\r\n          userName: 'سارة أحمد',\r\n          role: 'member',\r\n          joinedAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 20)\r\n        },\r\n        {\r\n          userId: 'user-789',\r\n          userName: 'محمد أحمد',\r\n          role: 'member',\r\n          joinedAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 15)\r\n        }\r\n      ],\r\n      sharedCart: [\r\n        {\r\n          productId: 'prod-1',\r\n          productName: 'قميص قطن',\r\n          quantity: 2,\r\n          price: 50,\r\n          addedBy: 'user-456'\r\n        }\r\n      ],\r\n      sharedWishlist: [\r\n        {\r\n          productId: 'prod-2',\r\n          productName: 'حذاء رياضي',\r\n          addedBy: 'user-789'\r\n        }\r\n      ],\r\n      totalOrders: 15,\r\n      totalSpent: 7500,\r\n      createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 30)\r\n    };\r\n    \r\n    res.json(familyAccount);\r\n  } catch (error) {\r\n    console.error('Error fetching family account:', error);\r\n    res.status(500).json({ error: 'Failed to fetch family account' });\r\n  }\r\n};\r\n\r\n// GET /api/shipments/track/:orderId - تتبع الشحنة\r\nexport const trackShipment: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { orderId } = req.params;\r\n    \r\n    if (!orderId) {\r\n      return res.status(400).json({ error: 'Order ID is required' });\r\n    }\r\n    \r\n    // TODO: ربط مع شركة الشحن API\r\n    // TODO: Google Maps API للموقع الحالي\r\n    \r\n    const tracking = {\r\n      orderId,\r\n      status: 'in_transit',\r\n      statusArabic: 'قيد التوصيل',\r\n      currentLocation: {\r\n        lat: 30.0444,\r\n        lng: 31.2357,\r\n        address: 'القاهرة - مدينة نصر'\r\n      },\r\n      driverInfo: {\r\n        name: 'محمد علي',\r\n        phone: '+20 100 123 4567',\r\n        rating: 4.8,\r\n        vehicleNumber: 'أ ب ج 1234'\r\n      },\r\n      estimatedArrival: new Date(Date.now() + 1000 * 60 * 30), // 30 minutes\r\n      deliveryAddress: {\r\n        lat: 30.0626,\r\n        lng: 31.2497,\r\n        address: 'التجمع الخامس - الشارع الرئيسي'\r\n      },\r\n      timeline: [\r\n        {\r\n          status: 'order_placed',\r\n          statusArabic: 'تم الطلب',\r\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24),\r\n          location: 'مركز التوزيع الرئيسي'\r\n        },\r\n        {\r\n          status: 'preparing',\r\n          statusArabic: 'قيد التجهيز',\r\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 20),\r\n          location: 'مركز التوزيع الرئيسي'\r\n        },\r\n        {\r\n          status: 'out_for_delivery',\r\n          statusArabic: 'خرج للتوصيل',\r\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2),\r\n          location: 'القاهرة'\r\n        },\r\n        {\r\n          status: 'in_transit',\r\n          statusArabic: 'قيد التوصيل',\r\n          timestamp: new Date(Date.now() - 1000 * 60 * 30),\r\n          location: 'مدينة نصر',\r\n          current: true\r\n        }\r\n      ]\r\n    };\r\n    \r\n    res.json(tracking);\r\n  } catch (error) {\r\n    console.error('Error tracking shipment:', error);\r\n    res.status(500).json({ error: 'Failed to track shipment' });\r\n  }\r\n};\r\n","// ============================================\r\n// Appwrite Helper Library\r\n// ============================================\r\n\r\nimport { Client, Databases, ID, Query } from 'node-appwrite';\r\n\r\n// ===== CONFIGURATION =====\r\n\r\nconst client = new Client()\r\n  .setEndpoint(process.env.APPWRITE_ENDPOINT || 'https://cloud.appwrite.io/v1')\r\n  .setProject(process.env.APPWRITE_PROJECT_ID || '')\r\n  .setKey(process.env.APPWRITE_API_KEY || '');\r\n\r\nexport const databases = new Databases(client);\r\n\r\n// Database and Collection IDs\r\nexport const DATABASE_ID = process.env.APPWRITE_DATABASE_ID || 'egygo_database';\r\n\r\nexport const COLLECTIONS = {\r\n  ROLES: 'roles',\r\n  AUDIT_LOGS: 'audit_logs',\r\n  SMART_CONTRACTS: 'smart_contracts',\r\n  AB_TESTS: 'ab_tests',\r\n  FAMILY_GROUPS: 'family_groups',\r\n  FAMILY_MEMBERS: 'family_members',\r\n  AR_MODELS: 'ar_models',\r\n  CHAT_MESSAGES: 'chat_messages',\r\n  BUNDLES: 'bundles'\r\n};\r\n\r\n// ===== HELPER FUNCTIONS =====\r\n\r\n/**\r\n * Create a document with auto-generated ID\r\n */\r\nexport async function createDocument(\r\n  collectionId: string,\r\n  data: any,\r\n  permissions?: string[]\r\n) {\r\n  try {\r\n    return await databases.createDocument(\r\n      DATABASE_ID,\r\n      collectionId,\r\n      ID.unique(),\r\n      data,\r\n      permissions\r\n    );\r\n  } catch (error) {\r\n    console.error(`Error creating document in ${collectionId}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Get a document by ID\r\n */\r\nexport async function getDocument(collectionId: string, documentId: string) {\r\n  try {\r\n    return await databases.getDocument(DATABASE_ID, collectionId, documentId);\r\n  } catch (error) {\r\n    console.error(`Error getting document ${documentId} from ${collectionId}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Update a document\r\n */\r\nexport async function updateDocument(\r\n  collectionId: string,\r\n  documentId: string,\r\n  data: any,\r\n  permissions?: string[]\r\n) {\r\n  try {\r\n    return await databases.updateDocument(\r\n      DATABASE_ID,\r\n      collectionId,\r\n      documentId,\r\n      data,\r\n      permissions\r\n    );\r\n  } catch (error) {\r\n    console.error(`Error updating document ${documentId} in ${collectionId}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Delete a document\r\n */\r\nexport async function deleteDocument(collectionId: string, documentId: string) {\r\n  try {\r\n    return await databases.deleteDocument(DATABASE_ID, collectionId, documentId);\r\n  } catch (error) {\r\n    console.error(`Error deleting document ${documentId} from ${collectionId}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * List documents with optional queries\r\n */\r\nexport async function listDocuments(\r\n  collectionId: string,\r\n  queries: string[] = []\r\n) {\r\n  try {\r\n    return await databases.listDocuments(DATABASE_ID, collectionId, queries);\r\n  } catch (error) {\r\n    console.error(`Error listing documents from ${collectionId}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// ===== SPECIFIC HELPERS =====\r\n\r\n/**\r\n * RBAC: Get role by name\r\n */\r\nexport async function getRoleByName(name: string) {\r\n  const result = await listDocuments(COLLECTIONS.ROLES, [\r\n    Query.equal('name', name),\r\n    Query.limit(1)\r\n  ]);\r\n  return result.documents[0] || null;\r\n}\r\n\r\n/**\r\n * RBAC: Create audit log\r\n */\r\nexport async function createAuditLog(data: {\r\n  userId: string;\r\n  action: string;\r\n  resource: string;\r\n  ipAddress?: string;\r\n  success: boolean;\r\n  metadata?: any;\r\n}) {\r\n  return await createDocument(COLLECTIONS.AUDIT_LOGS, {\r\n    userId: data.userId,\r\n    action: data.action,\r\n    resource: data.resource,\r\n    ipAddress: data.ipAddress || '',\r\n    success: data.success,\r\n    metadata: JSON.stringify(data.metadata || {})\r\n  });\r\n}\r\n\r\n/**\r\n * Smart Contracts: Get user contracts\r\n */\r\nexport async function getUserContracts(userId: string, type?: string, status?: string) {\r\n  const queries = [Query.equal('userId', userId)];\r\n  \r\n  if (type) queries.push(Query.equal('type', type));\r\n  if (status) queries.push(Query.equal('status', status));\r\n  \r\n  return await listDocuments(COLLECTIONS.SMART_CONTRACTS, queries);\r\n}\r\n\r\n/**\r\n * A/B Tests: Get active tests\r\n */\r\nexport async function getActiveABTests() {\r\n  return await listDocuments(COLLECTIONS.AB_TESTS, [\r\n    Query.equal('status', 'running'),\r\n    Query.orderDesc('$createdAt')\r\n  ]);\r\n}\r\n\r\n/**\r\n * Family: Get family group with members\r\n */\r\nexport async function getFamilyGroupWithMembers(groupId: string) {\r\n  const group = await getDocument(COLLECTIONS.FAMILY_GROUPS, groupId);\r\n  \r\n  const membersResult = await listDocuments(COLLECTIONS.FAMILY_MEMBERS, [\r\n    Query.equal('groupId', groupId)\r\n  ]);\r\n  \r\n  return {\r\n    ...group,\r\n    members: membersResult.documents\r\n  };\r\n}\r\n\r\n/**\r\n * AR Models: Get product AR models\r\n */\r\nexport async function getProductARModels(productId: string) {\r\n  return await listDocuments(COLLECTIONS.AR_MODELS, [\r\n    Query.equal('productId', productId)\r\n  ]);\r\n}\r\n\r\n/**\r\n * Chat: Get user chat history\r\n */\r\nexport async function getUserChatHistory(userId: string, limit: number = 50) {\r\n  return await listDocuments(COLLECTIONS.CHAT_MESSAGES, [\r\n    Query.equal('userId', userId),\r\n    Query.orderDesc('$createdAt'),\r\n    Query.limit(limit)\r\n  ]);\r\n}\r\n\r\n/**\r\n * Bundles: Get active bundles\r\n */\r\nexport async function getActiveBundles() {\r\n  return await listDocuments(COLLECTIONS.BUNDLES, [\r\n    Query.equal('active', true)\r\n  ]);\r\n}\r\n\r\n// ===== PAGINATION HELPER =====\r\n\r\n/**\r\n * Get paginated documents\r\n */\r\nexport async function getPaginatedDocuments(\r\n  collectionId: string,\r\n  page: number = 1,\r\n  limit: number = 20,\r\n  additionalQueries: string[] = []\r\n) {\r\n  const offset = (page - 1) * limit;\r\n  \r\n  const queries = [\r\n    Query.limit(limit),\r\n    Query.offset(offset),\r\n    ...additionalQueries\r\n  ];\r\n  \r\n  const result = await listDocuments(collectionId, queries);\r\n  \r\n  return {\r\n    documents: result.documents,\r\n    total: result.total,\r\n    page,\r\n    limit,\r\n    totalPages: Math.ceil(result.total / limit)\r\n  };\r\n}\r\n\r\n// ===== SEARCH HELPER =====\r\n\r\n/**\r\n * Search documents by text (works on indexed string fields)\r\n */\r\nexport async function searchDocuments(\r\n  collectionId: string,\r\n  searchKey: string,\r\n  searchValue: string\r\n) {\r\n  return await listDocuments(collectionId, [\r\n    Query.search(searchKey, searchValue)\r\n  ]);\r\n}\r\n\r\n// ===== BATCH OPERATIONS =====\r\n\r\n/**\r\n * Create multiple documents (Note: Appwrite doesn't support batch, so we loop)\r\n */\r\nexport async function createMultipleDocuments(\r\n  collectionId: string,\r\n  dataArray: any[]\r\n) {\r\n  const promises = dataArray.map(data => createDocument(collectionId, data));\r\n  return await Promise.all(promises);\r\n}\r\n\r\n/**\r\n * Update multiple documents\r\n */\r\nexport async function updateMultipleDocuments(\r\n  collectionId: string,\r\n  updates: Array<{ documentId: string; data: any }>\r\n) {\r\n  const promises = updates.map(({ documentId, data }) =>\r\n    updateDocument(collectionId, documentId, data)\r\n  );\r\n  return await Promise.all(promises);\r\n}\r\n\r\n// ===== SEED DATA =====\r\n\r\n/**\r\n * Seed default roles (run once)\r\n */\r\nexport async function seedDefaultRoles() {\r\n  const defaultRoles = [\r\n    {\r\n      name: 'admin',\r\n      permissions: ['read', 'write', 'delete', 'admin'],\r\n      description: 'Full system access'\r\n    },\r\n    {\r\n      name: 'merchant',\r\n      permissions: ['read', 'write'],\r\n      description: 'Manage products and orders'\r\n    },\r\n    {\r\n      name: 'affiliate',\r\n      permissions: ['read', 'write'],\r\n      description: 'Create affiliate links and track performance'\r\n    },\r\n    {\r\n      name: 'customer',\r\n      permissions: ['read'],\r\n      description: 'Browse and purchase products'\r\n    }\r\n  ];\r\n  \r\n  try {\r\n    for (const role of defaultRoles) {\r\n      const existing = await getRoleByName(role.name);\r\n      if (!existing) {\r\n        await createDocument(COLLECTIONS.ROLES, {\r\n          ...role,\r\n          permissions: JSON.stringify(role.permissions)\r\n        });\r\n        console.log(`✅ Created role: ${role.name}`);\r\n      } else {\r\n        console.log(`⏭️  Role already exists: ${role.name}`);\r\n      }\r\n    }\r\n    console.log('✅ Default roles seeded successfully');\r\n  } catch (error) {\r\n    console.error('❌ Error seeding roles:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// ===== EXPORT =====\r\n\r\nexport { Query, ID };\r\n\r\n// ===== USAGE EXAMPLES =====\r\n\r\n/**\r\n * Example 1: Create a role\r\n * \r\n * import { createDocument, COLLECTIONS } from '@/lib/appwrite';\r\n * \r\n * const role = await createDocument(COLLECTIONS.ROLES, {\r\n *   name: 'moderator',\r\n *   permissions: JSON.stringify(['read', 'write']),\r\n *   description: 'Moderator role'\r\n * });\r\n */\r\n\r\n/**\r\n * Example 2: Get audit logs with pagination\r\n * \r\n * import { getPaginatedDocuments, COLLECTIONS, Query } from '@/lib/appwrite';\r\n * \r\n * const logs = await getPaginatedDocuments(\r\n *   COLLECTIONS.AUDIT_LOGS,\r\n *   1,\r\n *   20,\r\n *   [Query.equal('userId', 'user123'), Query.orderDesc('$createdAt')]\r\n * );\r\n */\r\n\r\n/**\r\n * Example 3: Create smart contract\r\n * \r\n * import { createDocument, COLLECTIONS } from '@/lib/appwrite';\r\n * \r\n * const contract = await createDocument(COLLECTIONS.SMART_CONTRACTS, {\r\n *   userId: 'user123',\r\n *   type: 'affiliate',\r\n *   terms: JSON.stringify({\r\n *     commissionRate: 10,\r\n *     paymentSchedule: 'monthly'\r\n *   }),\r\n *   status: 'active'\r\n * });\r\n */\r\n\r\n/**\r\n * Example 4: Update A/B test winner\r\n * \r\n * import { updateDocument, COLLECTIONS } from '@/lib/appwrite';\r\n * \r\n * await updateDocument(COLLECTIONS.AB_TESTS, testId, {\r\n *   winner: 'variant_a',\r\n *   status: 'completed'\r\n * });\r\n */\r\n\r\n/**\r\n * Example 5: Search chat messages\r\n * \r\n * import { searchDocuments, COLLECTIONS } from '@/lib/appwrite';\r\n * \r\n * const results = await searchDocuments(\r\n *   COLLECTIONS.CHAT_MESSAGES,\r\n *   'message',\r\n *   'laptop'\r\n * );\r\n */\r\n","import { RequestHandler } from 'express';\r\nimport { listDocuments, Query } from '../lib/appwrite';\r\n\r\n// ============================================\r\n// Supply Chain, Inventory, Search, Loyalty APIs\r\n// ============================================\r\n\r\n// ===== SUPPLY CHAIN =====\r\n\r\n// GET /api/supply/offers - مقارنة عروض الموردين\r\nexport const getSupplyOffers: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { productId } = req.query;\r\n    \r\n    // جلب من Appwrite database\r\n    const queries: any[] = [];\r\n    if (productId) queries.push(Query.equal('productId', String(productId)));\r\n    const result = await listDocuments('supply_offers', queries);\r\n    res.json(result.documents);\r\n  } catch (error) {\r\n    console.error('Error fetching supply offers:', error);\r\n    res.status(500).json({ error: 'Failed to fetch offers' });\r\n  }\r\n};\r\n\r\n// POST /api/supply/compare - مقارنة مفصلة\r\nexport const compareSuppliers: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { supplierIds } = req.body;\r\n    \r\n    if (!supplierIds || !Array.isArray(supplierIds)) {\r\n      return res.status(400).json({ error: 'supplierIds array is required' });\r\n    }\r\n    \r\n    // TODO: حساب مفصل للتكاليف\r\n    const comparison = {\r\n      suppliers: supplierIds.map((id, index) => ({\r\n        id,\r\n        name: `مورد ${String.fromCharCode(65 + index)}`,\r\n        totalCost: 4500 + index * 200,\r\n        unitCost: 45 + index * 2,\r\n        deliveryTime: 7 + index * 3,\r\n        reliability: 95 - index * 5,\r\n        recommendation: index === 0\r\n      })),\r\n      bestPrice: supplierIds[1],\r\n      fastestDelivery: supplierIds[0],\r\n      bestValue: supplierIds[0]\r\n    };\r\n    \r\n    res.json(comparison);\r\n  } catch (error) {\r\n    console.error('Error comparing suppliers:', error);\r\n    res.status(500).json({ error: 'Failed to compare suppliers' });\r\n  }\r\n};\r\n\r\n// POST /api/bundles - إنشاء حزمة منتجات\r\nexport const createBundle: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { name, products, discountPercentage } = req.body;\r\n    \r\n    if (!name || !products || !Array.isArray(products)) {\r\n      return res.status(400).json({ \r\n        error: 'name and products array are required' \r\n      });\r\n    }\r\n    \r\n    // Calculate bundle price\r\n    const totalPrice = products.reduce((sum, p) => sum + (p.price * p.quantity), 0);\r\n    const bundlePrice = totalPrice * (1 - (discountPercentage || 0) / 100);\r\n    \r\n    const bundle = {\r\n      id: Date.now().toString(),\r\n      name,\r\n      products,\r\n      originalPrice: totalPrice,\r\n      discountPercentage: discountPercentage || 0,\r\n      bundlePrice,\r\n      savings: totalPrice - bundlePrice,\r\n      createdAt: new Date()\r\n    };\r\n    \r\n    // حفظ في Appwrite database\r\n    try {\r\n      const { createDocument } = require('../lib/appwrite');\r\n      const created = await createDocument('bundles', {\r\n        name,\r\n        products,\r\n        originalPrice: totalPrice,\r\n        discountPercentage: discountPercentage || 0,\r\n        bundlePrice,\r\n        savings: totalPrice - bundlePrice,\r\n        createdAt: new Date().toISOString()\r\n      });\r\n      res.status(201).json(created);\r\n    } catch (dbError) {\r\n      console.error('Error saving bundle to DB:', dbError);\r\n      res.status(500).json({ error: 'Failed to save bundle to database' });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error creating bundle:', error);\r\n    res.status(500).json({ error: 'Failed to create bundle' });\r\n  }\r\n};\r\n\r\n// GET /api/price/simulate - محاكي التسعير\r\nexport const simulatePrice: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { productId, basePrice } = req.query;\r\n    \r\n    const price = Number(basePrice) || 100;\r\n    \r\n    // Simulate 3 scenarios\r\n    const scenarios = [\r\n      {\r\n        name: 'سعر منخفض',\r\n        price: price * 0.85,\r\n        estimatedSales: 150,\r\n        estimatedRevenue: price * 0.85 * 150,\r\n        margin: 25,\r\n        marketPosition: 'تنافسي جداً'\r\n      },\r\n      {\r\n        name: 'سعر متوسط',\r\n        price: price,\r\n        estimatedSales: 100,\r\n        estimatedRevenue: price * 100,\r\n        margin: 35,\r\n        marketPosition: 'متوازن',\r\n        recommended: true\r\n      },\r\n      {\r\n        name: 'سعر مرتفع',\r\n        price: price * 1.20,\r\n        estimatedSales: 60,\r\n        estimatedRevenue: price * 1.20 * 60,\r\n        margin: 50,\r\n        marketPosition: 'premium'\r\n      }\r\n    ];\r\n    \r\n    res.json({ productId, scenarios });\r\n  } catch (error) {\r\n    console.error('Error simulating price:', error);\r\n    res.status(500).json({ error: 'Failed to simulate price' });\r\n  }\r\n};\r\n\r\n// ===== INVENTORY =====\r\n\r\n// GET /api/inventory/alerts - تنبيهات المخزون\r\nexport const getInventoryAlerts: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { severity } = req.query;\r\n    \r\n    // جلب من Appwrite database\r\n    const queries: any[] = [];\r\n    if (severity) queries.push(Query.equal('severity', String(severity)));\r\n    const result = await listDocuments('inventory_alerts', queries);\r\n    res.json(result.documents);\r\n  } catch (error) {\r\n    console.error('Error fetching inventory alerts:', error);\r\n    res.status(500).json({ error: 'Failed to fetch alerts' });\r\n  }\r\n};\r\n\r\n// POST /api/inventory/reorder - إعادة طلب\r\nexport const reorderInventory: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { productId, quantity, supplierId } = req.body;\r\n    \r\n    if (!productId || !quantity) {\r\n      return res.status(400).json({ \r\n        error: 'productId and quantity are required' \r\n      });\r\n    }\r\n    \r\n    const reorder = {\r\n      id: Date.now().toString(),\r\n      productId,\r\n      quantity,\r\n      supplierId,\r\n      status: 'pending',\r\n      estimatedArrival: new Date(Date.now() + 1000 * 60 * 60 * 24 * 7),\r\n      createdAt: new Date()\r\n    };\r\n    \r\n    // حفظ في Appwrite database وإشعار المورد\r\n    try {\r\n      const { createDocument } = require('../lib/appwrite');\r\n      const created = await createDocument('reorders', {\r\n        productId,\r\n        quantity,\r\n        supplierId,\r\n        status: 'pending',\r\n        estimatedArrival: reorder.estimatedArrival.toISOString(),\r\n        createdAt: new Date().toISOString()\r\n      });\r\n      // إشعار المورد (اختياري)\r\n      // TODO: send notification to supplier if needed\r\n      res.status(201).json(created);\r\n    } catch (dbError) {\r\n      console.error('Error saving reorder to DB:', dbError);\r\n      res.status(500).json({ error: 'Failed to save reorder to database' });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error creating reorder:', error);\r\n    res.status(500).json({ error: 'Failed to create reorder' });\r\n  }\r\n};\r\n\r\n// GET /api/inventory/predictions - توقعات المخزون\r\nexport const getInventoryPredictions: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { productId, days = 30 } = req.query;\r\n    \r\n    // TODO: ML model للتوقع\r\n    const predictions = {\r\n      productId,\r\n      currentStock: 100,\r\n      predictions: [\r\n        { day: 7, estimatedStock: 85, confidence: 0.92 },\r\n        { day: 14, estimatedStock: 68, confidence: 0.88 },\r\n        { day: 21, estimatedStock: 52, confidence: 0.82 },\r\n        { day: 30, estimatedStock: 35, confidence: 0.75 }\r\n      ],\r\n      recommendedActions: [\r\n        { action: 'reorder', date: new Date(Date.now() + 1000 * 60 * 60 * 24 * 18), quantity: 100 }\r\n      ]\r\n    };\r\n    \r\n    res.json(predictions);\r\n  } catch (error) {\r\n    console.error('Error getting predictions:', error);\r\n    res.status(500).json({ error: 'Failed to get predictions' });\r\n  }\r\n};\r\n\r\n// ===== SEARCH =====\r\n\r\n// GET /api/search - بحث شامل\r\nexport const universalSearch: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { q, type = 'all' } = req.query;\r\n    \r\n    if (!q) {\r\n      return res.status(400).json({ error: 'Query parameter q is required' });\r\n    }\r\n    \r\n    const query = String(q).toLowerCase();\r\n    \r\n    // بحث في Appwrite database\r\n    const { searchDocuments } = require('../lib/appwrite');\r\n    const results: any = {};\r\n    if (type === 'all' || type === 'products') {\r\n      results.products = (await searchDocuments('products', 'name', query)).documents;\r\n    }\r\n    if (type === 'all' || type === 'orders') {\r\n      results.orders = (await searchDocuments('orders', 'id', query)).documents;\r\n    }\r\n    if (type === 'all' || type === 'pages') {\r\n      results.pages = (await searchDocuments('pages', 'title', query)).documents;\r\n    }\r\n    res.json(results);\r\n  } catch (error) {\r\n    console.error('Error searching:', error);\r\n    res.status(500).json({ error: 'Search failed' });\r\n  }\r\n};\r\n\r\n// GET /api/search/suggestions - اقتراحات البحث\r\nexport const getSearchSuggestions: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { q } = req.query;\r\n    \r\n    if (!q) {\r\n      return res.json([]);\r\n    }\r\n    \r\n    // جلب من Appwrite database بناءً على popularity\r\n    const { listDocuments, Query } = require('../lib/appwrite');\r\n    const result = await listDocuments('products', [\r\n      Query.orderDesc('popularity'),\r\n      Query.limit(5)\r\n    ]);\r\n    const suggestions = result.documents.map((doc: any) => doc.name);\r\n    res.json(suggestions);\r\n  } catch (error) {\r\n    console.error('Error getting suggestions:', error);\r\n    res.status(500).json({ error: 'Failed to get suggestions' });\r\n  }\r\n};\r\n\r\n// ===== LOYALTY & CURRENCY =====\r\n\r\n// GET /api/loyalty/tiers - مستويات الولاء\r\nexport const getLoyaltyTiers: RequestHandler = async (req, res) => {\r\n  try {\r\n    const tiers = [\r\n      {\r\n        id: 'silver',\r\n        name: 'فضي',\r\n        minPoints: 0,\r\n        benefits: ['شحن مجاني على طلبات +500 جنيه', 'خصم 5% على الطلب الثالث'],\r\n        color: '#C0C0C0'\r\n      },\r\n      {\r\n        id: 'gold',\r\n        name: 'ذهبي',\r\n        minPoints: 1000,\r\n        benefits: ['شحن مجاني دائماً', 'خصم 10%', 'دعم أولوية'],\r\n        color: '#FFD700'\r\n      },\r\n      {\r\n        id: 'platinum',\r\n        name: 'بلاتيني',\r\n        minPoints: 5000,\r\n        benefits: ['كل مميزات الذهبي', 'خصم 15%', 'وصول مبكر للمنتجات', 'هدايا حصرية'],\r\n        color: '#E5E4E2'\r\n      }\r\n    ];\r\n    \r\n    res.json(tiers);\r\n  } catch (error) {\r\n    console.error('Error fetching tiers:', error);\r\n    res.status(500).json({ error: 'Failed to fetch tiers' });\r\n  }\r\n};\r\n\r\n// POST /api/loyalty/calculate - حساب النقاط\r\nexport const calculateLoyaltyPoints: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { userId, orderValue } = req.body;\r\n    \r\n    if (!userId || !orderValue) {\r\n      return res.status(400).json({ \r\n        error: 'userId and orderValue are required' \r\n      });\r\n    }\r\n    \r\n    // 1 point per 10 EGP\r\n    const pointsEarned = Math.floor(orderValue / 10);\r\n    // جلب النقاط الحالية من Appwrite database\r\n    let currentPoints = 0;\r\n    try {\r\n      const { listDocuments, Query } = require('../lib/appwrite');\r\n      const result = await listDocuments('loyalty_points', [Query.equal('userId', userId), Query.limit(1)]);\r\n      if (result.documents.length > 0) {\r\n        currentPoints = result.documents[0].points || 0;\r\n      }\r\n    } catch (e) {\r\n      console.error('Error fetching loyalty points from DB:', e);\r\n    }\r\n    const newTotal = currentPoints + pointsEarned;\r\n    // Determine tier\r\n    let tier = 'silver';\r\n    if (newTotal >= 5000) tier = 'platinum';\r\n    else if (newTotal >= 1000) tier = 'gold';\r\n    res.json({\r\n      userId,\r\n      pointsEarned,\r\n      currentPoints: newTotal,\r\n      tier,\r\n      nextTier: tier === 'silver' ? 'gold' : tier === 'gold' ? 'platinum' : null,\r\n      pointsToNextTier: tier === 'silver' ? 1000 - newTotal : tier === 'gold' ? 5000 - newTotal : 0\r\n    });\r\n  } catch (error) {\r\n    console.error('Error calculating points:', error);\r\n    res.status(500).json({ error: 'Failed to calculate points' });\r\n  }\r\n};\r\n\r\n// GET /api/currency/rates - أسعار العملات\r\nexport const getCurrencyRates: RequestHandler = async (req, res) => {\r\n  try {\r\n    // TODO: ربط مع Exchange Rate API\r\n    const rates = {\r\n      base: 'EGP',\r\n      date: new Date(),\r\n      rates: {\r\n        USD: 0.032,\r\n        EUR: 0.029,\r\n        GBP: 0.025,\r\n        SAR: 0.12,\r\n        AED: 0.12,\r\n        KWD: 0.010\r\n      }\r\n    };\r\n    \r\n    res.json(rates);\r\n  } catch (error) {\r\n    console.error('Error fetching rates:', error);\r\n    res.status(500).json({ error: 'Failed to fetch rates' });\r\n  }\r\n};\r\n\r\n// POST /api/currency/convert - تحويل العملة\r\nexport const convertCurrency: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { amount, from = 'EGP', to } = req.body;\r\n    \r\n    if (!amount || !to) {\r\n      return res.status(400).json({ \r\n        error: 'amount and to currency are required' \r\n      });\r\n    }\r\n    \r\n    // TODO: استخدام أسعار حقيقية\r\n    const rates: Record<string, number> = {\r\n      'EGP_USD': 0.032,\r\n      'EGP_EUR': 0.029,\r\n      'EGP_SAR': 0.12\r\n    };\r\n    \r\n    const rate = rates[`${from}_${to}`] || 1;\r\n    const converted = amount * rate;\r\n    \r\n    res.json({\r\n      from,\r\n      to,\r\n      amount,\r\n      converted,\r\n      rate\r\n    });\r\n  } catch (error) {\r\n    console.error('Error converting currency:', error);\r\n    res.status(500).json({ error: 'Failed to convert currency' });\r\n  }\r\n};\r\n","\r\nimport { RequestHandler } from 'express';\r\nimport { Query, ID, createDocument, getDocument, updateDocument, deleteDocument, listDocuments } from '../lib/appwrite';\r\nconst NOTIFICATIONS_COLLECTION = 'notifications';\r\n\r\n// ============================================\r\n// Notifications APIs\r\n// ============================================\r\n\r\nexport interface Notification {\r\n  id: string;\r\n  userId: string;\r\n  title: string;\r\n  message: string;\r\n  type: 'info' | 'success' | 'warning' | 'error' | 'important';\r\n  isRead: boolean;\r\n  actionUrl?: string;\r\n  metadata?: Record<string, any>;\r\n  createdAt: Date;\r\n}\r\n\r\n// GET /api/notifications - جلب الإشعارات\r\nexport const getNotifications: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { userId, isRead, type, page = 1, limit = 20 } = req.query;\r\n    if (!userId) {\r\n      return res.status(400).json({ error: 'userId is required' });\r\n    }\r\n    const queries: any[] = [Query.equal('userId', String(userId))];\r\n    if (isRead !== undefined) {\r\n      queries.push(Query.equal('isRead', isRead === 'true'));\r\n    }\r\n    if (type) {\r\n      queries.push(Query.equal('type', String(type)));\r\n    }\r\n    queries.push(Query.orderDesc('$createdAt'));\r\n    // Pagination\r\n    const offset = (Number(page) - 1) * Number(limit);\r\n    queries.push(Query.limit(Number(limit)));\r\n    queries.push(Query.offset(offset));\r\n    const result = await listDocuments(NOTIFICATIONS_COLLECTION, queries);\r\n    // Get unread count\r\n    const unreadResult = await listDocuments(NOTIFICATIONS_COLLECTION, [\r\n      Query.equal('userId', String(userId)),\r\n      Query.equal('isRead', false)\r\n    ]);\r\n    res.json({\r\n      notifications: result.documents,\r\n      unreadCount: unreadResult.total,\r\n      pagination: {\r\n        page: Number(page),\r\n        limit: Number(limit),\r\n        total: result.total,\r\n        totalPages: Math.ceil(result.total / Number(limit))\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching notifications:', error);\r\n    res.status(500).json({ error: 'Failed to fetch notifications' });\r\n  }\r\n};\r\n\r\n// POST /api/notifications - إنشاء إشعار جديد\r\nexport const createNotification: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { userId, title, message, type = 'info', actionUrl, metadata } = req.body;\r\n    if (!userId || !title || !message) {\r\n      return res.status(400).json({ error: 'userId, title, and message are required' });\r\n    }\r\n    const data = {\r\n      userId,\r\n      title,\r\n      message,\r\n      type,\r\n      isRead: false,\r\n      actionUrl,\r\n      metadata: metadata ? JSON.stringify(metadata) : undefined,\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    const created = await createDocument(NOTIFICATIONS_COLLECTION, data);\r\n    // Send via WebSocket (if available)\r\n    try {\r\n      const { sendNotificationToUser } = require('../websocket');\r\n      sendNotificationToUser(userId, created);\r\n    } catch (wsError) {\r\n      console.log('WebSocket not available or user not connected');\r\n    }\r\n    res.status(201).json(created);\r\n  } catch (error) {\r\n    console.error('Error creating notification:', error);\r\n    res.status(500).json({ error: 'Failed to create notification' });\r\n  }\r\n};\r\n\r\n// POST /api/notifications/mark-read - تعليم كمقروء\r\nexport const markAsRead: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { notificationId, userId } = req.body;\r\n    if (!notificationId) {\r\n      return res.status(400).json({ error: 'notificationId is required' });\r\n    }\r\n    // Update notification as read\r\n    const updated = await updateDocument(\r\n      NOTIFICATIONS_COLLECTION,\r\n      notificationId,\r\n      { isRead: true }\r\n    );\r\n    res.json({ success: true, notificationId, markedAt: new Date(), updated });\r\n  } catch (error) {\r\n    console.error('Error marking as read:', error);\r\n    res.status(500).json({ error: 'Failed to mark as read' });\r\n  }\r\n};\r\n\r\n// POST /api/notifications/mark-all-read - تعليم الكل كمقروء\r\nexport const markAllAsRead: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { userId } = req.body;\r\n    if (!userId) {\r\n      return res.status(400).json({ error: 'userId is required' });\r\n    }\r\n    // Get all unread notifications for user\r\n    const unread = await listDocuments(NOTIFICATIONS_COLLECTION, [\r\n      Query.equal('userId', userId),\r\n      Query.equal('isRead', false),\r\n      Query.limit(1000)\r\n    ]);\r\n    const updates = unread.documents.map((n: any) => ({ documentId: n.$id, data: { isRead: true } }));\r\n    let markedCount = 0;\r\n    if (updates.length > 0) {\r\n      // Batch update\r\n      const { updateMultipleDocuments } = require('../lib/appwrite');\r\n      await updateMultipleDocuments(NOTIFICATIONS_COLLECTION, updates);\r\n      markedCount = updates.length;\r\n    }\r\n    res.json({ success: true, userId, markedCount, markedAt: new Date() });\r\n  } catch (error) {\r\n    console.error('Error marking all as read:', error);\r\n    res.status(500).json({ error: 'Failed to mark all as read' });\r\n  }\r\n};\r\n\r\n// DELETE /api/notifications/:id - حذف إشعار\r\nexport const deleteNotification: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { userId } = req.query;\r\n    if (!id) {\r\n      return res.status(400).json({ error: 'Notification ID is required' });\r\n    }\r\n    // Optionally: verify userId owns it (not enforced here)\r\n    await deleteDocument(NOTIFICATIONS_COLLECTION, id);\r\n    res.json({ success: true, deletedId: id });\r\n  } catch (error) {\r\n    console.error('Error deleting notification:', error);\r\n    res.status(500).json({ error: 'Failed to delete notification' });\r\n  }\r\n};\r\n\r\n// POST /api/notifications/broadcast - إرسال إشعار جماعي\r\nexport const broadcastNotification: RequestHandler = async (req, res) => {\r\n  try {\r\n    const { title, message, type = 'info', targetUsers, targetRole } = req.body;\r\n    if (!title || !message) {\r\n      return res.status(400).json({ error: 'title and message are required' });\r\n    }\r\n    let recipients: string[] = [];\r\n    if (targetUsers && Array.isArray(targetUsers)) {\r\n      recipients = targetUsers;\r\n    } else if (targetRole) {\r\n      // Fetch all users with this role (not implemented, placeholder)\r\n      // recipients = await getUsersByRole(targetRole);\r\n      recipients = [];\r\n    } else {\r\n      // Broadcast to all users (not implemented, placeholder)\r\n      recipients = [];\r\n    }\r\n    // Create notification for each recipient\r\n    let createdNotifications = [];\r\n    if (recipients.length > 0) {\r\n      const dataArray = recipients.map(userId => ({\r\n        userId,\r\n        title,\r\n        message,\r\n        type,\r\n        isRead: false,\r\n        createdAt: new Date().toISOString()\r\n      }));\r\n      const { createMultipleDocuments } = require('../lib/appwrite');\r\n      createdNotifications = await createMultipleDocuments(NOTIFICATIONS_COLLECTION, dataArray);\r\n    }\r\n    // Broadcast via WebSocket\r\n    try {\r\n      const { broadcastToAll, broadcastToRole } = require('../websocket');\r\n      if (targetRole) {\r\n        broadcastToRole(targetRole, { title, message, type });\r\n      } else {\r\n        broadcastToAll({ title, message, type });\r\n      }\r\n    } catch (wsError) {\r\n      console.log('WebSocket broadcast failed');\r\n    }\r\n    res.status(201).json({\r\n      title,\r\n      message,\r\n      type,\r\n      recipients,\r\n      sentAt: new Date(),\r\n      recipientsCount: recipients.length,\r\n      createdNotifications\r\n    });\r\n  } catch (error) {\r\n    console.error('Error broadcasting notification:', error);\r\n    res.status(500).json({ error: 'Failed to broadcast notification' });\r\n  }\r\n};\r\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { requestLogger, loggers } from \"./lib/logger\";\nimport { loginRateLimit, registrationRateLimit, passwordResetRateLimit } from \"./lib/rateLimiter\";\nimport { handleDemo } from \"./routes/demo\";\nimport { handleChatCompletion } from \"./routes/chat\";\nimport {\n  getProducts,\n  getProductById,\n  getProductsByCategory,\n} from \"./routes/products\";\nimport {\n  getCategories,\n  getCategoryBySlug,\n  updateCategoryProductCount,\n} from \"./routes/categories\";\nimport {\n  getAdminStats,\n  createProduct,\n  updateProduct,\n  deleteProduct,\n  createCategory,\n  updateCategory,\n  deleteCategory,\n  getUsers,\n  updateUserRole,\n  getOrders,\n  updateOrderStatus,\n  getCommissions,\n  updateCommissionStatus,\n} from \"./routes/admin\";\nimport { scrapeVendoorProducts } from \"./routes/vendoor-scraper\";\nimport { login, register, forgotPassword, getCurrentUser } from \"./routes/auth\";\nimport { getUserOrders, getOrderById } from \"./routes/orders\";\nimport {\n  getProductReviews,\n  createReview,\n  updateReview,\n  deleteReview,\n} from \"./routes/reviews\";\nimport {\n  scrapeAllProducts,\n  getScrapingProgress,\n  importProduct,\n} from \"./routes/vendoor\";\n\n// ===== NEW ADVANCED APIS =====\n// RBAC & Security\nimport {\n  getRoles,\n  createRole,\n  updateRole,\n  getAuditLogs,\n  checkPermission,\n} from \"./routes/rbac\";\n\n// Smart Contracts\nimport {\n  getContracts,\n  createContract,\n  updateContract,\n  getContractPerformance,\n} from \"./routes/contracts\";\n\n// A/B Testing\nimport {\n  getABTests,\n  createABTest,\n  setABTestWinner,\n  getABTestResults,\n} from \"./routes/experiments\";\n\n// Customer Experience\nimport {\n  aiChat,\n  createARModel,\n  getARModels,\n  createFamilyAccount,\n  getFamilyAccount,\n  trackShipment,\n} from \"./routes/customer-experience\";\n\n// Supply Chain & Others\nimport {\n  getSupplyOffers,\n  compareSuppliers,\n  createBundle,\n  simulatePrice,\n  getInventoryAlerts,\n  reorderInventory,\n  getInventoryPredictions,\n  universalSearch,\n  getSearchSuggestions,\n  getLoyaltyTiers,\n  calculateLoyaltyPoints,\n  getCurrencyRates,\n  convertCurrency,\n} from \"./routes/supply-chain\";\n\n// Notifications\nimport {\n  getNotifications,\n  createNotification,\n  markAsRead,\n  markAllAsRead,\n  deleteNotification,\n  broadcastNotification,\n} from \"./routes/notifications\";\n\n// Wishlist imports commented out for static deployment\n// import {\n//   getUserWishlist,\n//   addToWishlist,\n//   removeFromWishlist,\n//   isInWishlist,\n// } from \"./routes/wishlist\";\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  \n  // Logging middleware\n  app.use(requestLogger);\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n  \n  // AI Chat API\n  app.post(\"/api/chat\", handleChatCompletion);\n\n  // Products API\n  app.get(\"/api/products\", getProducts);\n  app.get(\"/api/products/:id\", getProductById);\n  app.get(\"/api/categories/:slug/products\", getProductsByCategory);\n\n  // Categories API\n  app.get(\"/api/categories\", getCategories);\n  app.get(\"/api/categories/:slug\", getCategoryBySlug);\n  app.post(\"/api/categories/update-counts\", updateCategoryProductCount);\n\n  // Auth API with rate limiting\n  app.post(\"/api/auth/login\", loginRateLimit, login);\n  app.post(\"/api/auth/register\", registrationRateLimit, register);\n  app.post(\"/api/auth/forgot-password\", passwordResetRateLimit, forgotPassword);\n  app.get(\"/api/auth/me\", getCurrentUser);\n\n  // Admin API\n  app.get(\"/api/admin/stats\", getAdminStats);\n\n  // Admin Products\n  app.post(\"/api/admin/products\", createProduct);\n  app.put(\"/api/admin/products/:id\", updateProduct);\n  app.delete(\"/api/admin/products/:id\", deleteProduct);\n\n  // Admin Categories\n  app.post(\"/api/admin/categories\", createCategory);\n  app.put(\"/api/admin/categories/:id\", updateCategory);\n  app.delete(\"/api/admin/categories/:id\", deleteCategory);\n\n  // Admin Users\n  app.get(\"/api/admin/users\", getUsers);\n  app.put(\"/api/admin/users/:id\", updateUserRole);\n\n  // Admin Orders\n  app.get(\"/api/admin/orders\", getOrders);\n  app.put(\"/api/admin/orders/:id\", updateOrderStatus);\n\n  // Admin Commissions\n  app.get(\"/api/admin/commissions\", getCommissions);\n  app.put(\"/api/admin/commissions/:id\", updateCommissionStatus);\n\n  // User Orders API\n  app.get(\"/api/orders\", getUserOrders);\n  app.get(\"/api/orders/:id\", getOrderById);\n\n  // Reviews API\n  app.get(\"/api/products/:productId/reviews\", getProductReviews);\n  app.post(\"/api/reviews\", createReview);\n  app.put(\"/api/reviews/:id\", updateReview);\n  app.delete(\"/api/reviews/:id\", deleteReview);\n\n  // Wishlist API - Commented out for static deployment\n  // Use client-side Appwrite SDK instead\n  // app.get(\"/api/wishlist\", getUserWishlist);\n  // app.post(\"/api/wishlist\", addToWishlist);\n  // app.delete(\"/api/wishlist/:id\", removeFromWishlist);\n  // app.get(\"/api/wishlist/check\", isInWishlist);\n\n  // Vendoor Import API\n  app.post(\"/api/vendoor/scrape-all\", scrapeAllProducts);\n  app.get(\"/api/vendoor/progress\", getScrapingProgress);\n  app.post(\"/api/vendoor/import-product\", importProduct);\n  \n  // Vendoor Scraper API (NEW - Simple endpoint)\n  app.get(\"/api/vendoor/scrape\", scrapeVendoorProducts);\n\n  // ===== ADVANCED APIS =====\n  \n  // RBAC & Security\n  app.get(\"/api/rbac/roles\", getRoles);\n  app.post(\"/api/rbac/roles\", createRole);\n  app.put(\"/api/rbac/roles/:id\", updateRole);\n  app.get(\"/api/rbac/audit-logs\", getAuditLogs);\n  app.post(\"/api/rbac/check-permission\", checkPermission);\n\n  // Smart Contracts\n  app.get(\"/api/contracts\", getContracts);\n  app.post(\"/api/contracts\", createContract);\n  app.put(\"/api/contracts/:id\", updateContract);\n  app.get(\"/api/contracts/performance/:id\", getContractPerformance);\n\n  // A/B Testing\n  app.get(\"/api/ab-tests\", getABTests);\n  app.post(\"/api/ab-tests\", createABTest);\n  app.put(\"/api/ab-tests/:id/winner\", setABTestWinner);\n  app.get(\"/api/ab-tests/:id/results\", getABTestResults);\n\n  // Customer Experience\n  app.post(\"/api/ai/chat\", aiChat);\n  app.post(\"/api/ar/models\", createARModel);\n  app.get(\"/api/ar/models/:productId\", getARModels);\n  app.post(\"/api/family/accounts\", createFamilyAccount);\n  app.get(\"/api/family/accounts/:id\", getFamilyAccount);\n  app.get(\"/api/shipments/track/:orderId\", trackShipment);\n\n  // Supply Chain\n  app.get(\"/api/supply/offers\", getSupplyOffers);\n  app.post(\"/api/supply/compare\", compareSuppliers);\n  app.post(\"/api/bundles\", createBundle);\n  app.get(\"/api/price/simulate\", simulatePrice);\n\n  // Inventory\n  app.get(\"/api/inventory/alerts\", getInventoryAlerts);\n  app.post(\"/api/inventory/reorder\", reorderInventory);\n  app.get(\"/api/inventory/predictions\", getInventoryPredictions);\n\n  // Universal Search\n  app.get(\"/api/search\", universalSearch);\n  app.get(\"/api/search/suggestions\", getSearchSuggestions);\n\n  // Loyalty & Currency\n  app.get(\"/api/loyalty/tiers\", getLoyaltyTiers);\n  app.post(\"/api/loyalty/calculate\", calculateLoyaltyPoints);\n  app.get(\"/api/currency/rates\", getCurrencyRates);\n  app.post(\"/api/currency/convert\", convertCurrency);\n\n  // Notifications\n  app.get(\"/api/notifications\", getNotifications);\n  app.post(\"/api/notifications\", createNotification);\n  app.post(\"/api/notifications/mark-read\", markAsRead);\n  app.post(\"/api/notifications/mark-all-read\", markAllAsRead);\n  app.delete(\"/api/notifications/:id\", deleteNotification);\n  app.post(\"/api/notifications/broadcast\", broadcastNotification);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["LOGIN_URL","PRODUCTS_BASE_URL","loginToVendoor","scrapeProductsPage","listDocuments","createDocument","updateDocument","Query","app","express"],"mappings":"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"}